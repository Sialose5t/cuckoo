// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/cuckoo-network/cuckoo/packages/node/internal/plugins/sd/sdcli"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// Defines values for CoinSymbol.
const (
	CoinSymbolSD      CoinSymbol = "SD"
	CoinSymbolUnknown CoinSymbol = "Unknown"
)

// Defines values for Status.
const (
	StatusCompleted  Status = "Completed"
	StatusFailed     Status = "Failed"
	StatusInProgress Status = "InProgress"
	StatusPending    Status = "Pending"
	StatusUnknown    Status = "Unknown"
)

// CPUInfo defines model for CPUInfo.
type CPUInfo struct {
	CountLogical  *int    `json:"count logical,omitempty"`
	CountPhysical *int    `json:"count physical,omitempty"`
	Model         *string `json:"model,omitempty"`
}

// CoinSymbol The coin symbol of the model
type CoinSymbol string

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Data    *string `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GPUProvider defines model for GPUProvider.
type GPUProvider struct {
	CPU             *CPUInfo `json:"CPU,omitempty"`
	RAM             *RAMInfo `json:"RAM,omitempty"`
	Checksum        *string  `json:"checksum,omitempty"`
	Commit          *string  `json:"commit,omitempty"`
	NvidiaGpuModels sdcli.NvidiaGPUModels  `json:"nvidia_gpu_models,omitempty"`
	Os              *string  `json:"os,omitempty"`
	Platform        *string  `json:"platform,omitempty"`
	Python          *string  `json:"python,omitempty"`

	// Sig signature of the createdAt field
	Sig     *string `json:"sig,omitempty"`
	Version *string `json:"version,omitempty"`

	// WalletAddress Primary key identifying the GPU provider
	WalletAddress string `json:"walletAddress"`
}

// HealthCheckResult defines model for HealthCheckResult.
type HealthCheckResult struct {
	Status string `json:"status"`
}

// OfferTaskRequest defines model for OfferTaskRequest.
type OfferTaskRequest struct {
	// CoinSymbol The coin symbol of the model
	CoinSymbol *CoinSymbol `json:"coinSymbol,omitempty"`
	Id         string      `json:"id"`

	// MaxOfferPrice Represented as a string to accommodate large numbers
	MaxOfferPrice string                  `json:"maxOfferPrice"`
	Payload       *map[string]interface{} `json:"payload,omitempty"`
}

// RAMInfo defines model for RAMInfo.
type RAMInfo struct {
	Active   *string `json:"active,omitempty"`
	Buffers  *string `json:"buffers,omitempty"`
	Cached   *string `json:"cached,omitempty"`
	Free     *string `json:"free,omitempty"`
	Inactive *string `json:"inactive,omitempty"`
	Shared   *string `json:"shared,omitempty"`
	Total    *string `json:"total,omitempty"`
	Used     *string `json:"used,omitempty"`
}

// Status The current status of the task
type Status string

// SubmitTaskResultRequest defines model for SubmitTaskResultRequest.
type SubmitTaskResultRequest struct {
	// CoinSymbol The coin symbol of the model
	CoinSymbol *CoinSymbol             `json:"coinSymbol,omitempty"`
	Id         *string                 `json:"id,omitempty"`
	Payload    *map[string]interface{} `json:"payload,omitempty"`

	// Status The current status of the task
	Status *Status `json:"status,omitempty"`
}

// TaskOffer defines model for TaskOffer.
type TaskOffer struct {
	// CoinSymbol The coin symbol of the model
	CoinSymbol CoinSymbol `json:"coinSymbol"`
	CreatedAt  time.Time  `json:"createdAt"`

	// Id Unique identifier for the task
	Id string `json:"id"`

	// MaxOfferPrice Maximum offer price in a compatible numeric string format
	MaxOfferPrice string                 `json:"maxOfferPrice"`
	Payload       map[string]interface{} `json:"payload"`

	// Status The current status of the task
	Status Status `json:"status"`
}

// TaskResult defines model for TaskResult.
type TaskResult struct {
	// Id The unique identifier of the image generation task.
	Id      string                  `json:"id"`
	Payload *map[string]interface{} `json:"payload,omitempty"`

	// Status The current status of the task
	Status *Status `json:"status,omitempty"`
}

// GetHealthJSONBody defines parameters for GetHealth.
type GetHealthJSONBody struct {
	Id      int    `json:"id"`
	Jsonrpc string `json:"jsonrpc"`
	Method  string `json:"method"`
}

// ListGPUProvidersJSONBody defines parameters for ListGPUProviders.
type ListGPUProvidersJSONBody struct {
	Id      int    `json:"id"`
	Jsonrpc string `json:"jsonrpc"`
	Method  string `json:"method"`
}

// ListPendingTasksJSONBody defines parameters for ListPendingTasks.
type ListPendingTasksJSONBody struct {
	Id      int           `json:"id"`
	Jsonrpc string        `json:"jsonrpc"`
	Method  string        `json:"method"`
	Params  []GPUProvider `json:"params"`
}

// OfferTaskJSONBody defines parameters for OfferTask.
type OfferTaskJSONBody struct {
	Id      string             `json:"id"`
	Jsonrpc string             `json:"jsonrpc"`
	Method  string             `json:"method"`
	Params  []OfferTaskRequest `json:"params"`
}

// SubmitTaskResultJSONBody defines parameters for SubmitTaskResult.
type SubmitTaskResultJSONBody struct {
	Id      int                       `json:"id"`
	Jsonrpc string                    `json:"jsonrpc"`
	Method  string                    `json:"method"`
	Params  []SubmitTaskResultRequest `json:"params"`
}

// GetHealthJSONRequestBody defines body for GetHealth for application/json ContentType.
type GetHealthJSONRequestBody GetHealthJSONBody

// ListGPUProvidersJSONRequestBody defines body for ListGPUProviders for application/json ContentType.
type ListGPUProvidersJSONRequestBody ListGPUProvidersJSONBody

// ListPendingTasksJSONRequestBody defines body for ListPendingTasks for application/json ContentType.
type ListPendingTasksJSONRequestBody ListPendingTasksJSONBody

// OfferTaskJSONRequestBody defines body for OfferTask for application/json ContentType.
type OfferTaskJSONRequestBody OfferTaskJSONBody

// SubmitTaskResultJSONRequestBody defines body for SubmitTaskResult for application/json ContentType.
type SubmitTaskResultJSONRequestBody SubmitTaskResultJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHealthWithBody request with any body
	GetHealthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetHealth(ctx context.Context, body GetHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGPUProvidersWithBody request with any body
	ListGPUProvidersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListGPUProviders(ctx context.Context, body ListGPUProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPendingTasksWithBody request with any body
	ListPendingTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListPendingTasks(ctx context.Context, body ListPendingTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OfferTaskWithBody request with any body
	OfferTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OfferTask(ctx context.Context, body OfferTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitTaskResultWithBody request with any body
	SubmitTaskResultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitTaskResult(ctx context.Context, body SubmitTaskResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHealthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, body GetHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGPUProvidersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGPUProvidersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGPUProviders(ctx context.Context, body ListGPUProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGPUProvidersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPendingTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPendingTasksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPendingTasks(ctx context.Context, body ListPendingTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPendingTasksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OfferTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOfferTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OfferTask(ctx context.Context, body OfferTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOfferTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitTaskResultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitTaskResultRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitTaskResult(ctx context.Context, body SubmitTaskResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitTaskResultRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHealthRequest calls the generic GetHealth builder with application/json body
func NewGetHealthRequest(server string, body GetHealthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetHealthRequestWithBody(server, "application/json", bodyReader)
}

// NewGetHealthRequestWithBody generates requests for GetHealth with any type of body
func NewGetHealthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/#getHealth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListGPUProvidersRequest calls the generic ListGPUProviders builder with application/json body
func NewListGPUProvidersRequest(server string, body ListGPUProvidersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListGPUProvidersRequestWithBody(server, "application/json", bodyReader)
}

// NewListGPUProvidersRequestWithBody generates requests for ListGPUProviders with any type of body
func NewListGPUProvidersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/#listGPUProviders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPendingTasksRequest calls the generic ListPendingTasks builder with application/json body
func NewListPendingTasksRequest(server string, body ListPendingTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListPendingTasksRequestWithBody(server, "application/json", bodyReader)
}

// NewListPendingTasksRequestWithBody generates requests for ListPendingTasks with any type of body
func NewListPendingTasksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/#listPendingTasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOfferTaskRequest calls the generic OfferTask builder with application/json body
func NewOfferTaskRequest(server string, body OfferTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOfferTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewOfferTaskRequestWithBody generates requests for OfferTask with any type of body
func NewOfferTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/#offerTask")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubmitTaskResultRequest calls the generic SubmitTaskResult builder with application/json body
func NewSubmitTaskResultRequest(server string, body SubmitTaskResultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitTaskResultRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitTaskResultRequestWithBody generates requests for SubmitTaskResult with any type of body
func NewSubmitTaskResultRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/#submitTaskResult")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHealthWithBodyWithResponse request with any body
	GetHealthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	GetHealthWithResponse(ctx context.Context, body GetHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// ListGPUProvidersWithBodyWithResponse request with any body
	ListGPUProvidersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListGPUProvidersResponse, error)

	ListGPUProvidersWithResponse(ctx context.Context, body ListGPUProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*ListGPUProvidersResponse, error)

	// ListPendingTasksWithBodyWithResponse request with any body
	ListPendingTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListPendingTasksResponse, error)

	ListPendingTasksWithResponse(ctx context.Context, body ListPendingTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*ListPendingTasksResponse, error)

	// OfferTaskWithBodyWithResponse request with any body
	OfferTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OfferTaskResponse, error)

	OfferTaskWithResponse(ctx context.Context, body OfferTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*OfferTaskResponse, error)

	// SubmitTaskResultWithBodyWithResponse request with any body
	SubmitTaskResultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitTaskResultResponse, error)

	SubmitTaskResultWithResponse(ctx context.Context, body SubmitTaskResultJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitTaskResultResponse, error)
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *Error            `json:"error,omitempty"`
		Id      int               `json:"id"`
		Jsonrpc string            `json:"jsonrpc"`
		Result  HealthCheckResult `json:"result"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGPUProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *Error        `json:"error,omitempty"`
		Id      int           `json:"id"`
		Jsonrpc string        `json:"jsonrpc"`
		Result  []GPUProvider `json:"result"`
	}
}

// Status returns HTTPResponse.Status
func (r ListGPUProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGPUProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPendingTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *Error      `json:"error,omitempty"`
		Id      int         `json:"id"`
		Jsonrpc string      `json:"jsonrpc"`
		Result  []TaskOffer `json:"result"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPendingTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPendingTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OfferTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResult
}

// Status returns HTTPResponse.Status
func (r OfferTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OfferTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitTaskResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *Error      `json:"error,omitempty"`
		Id      int         `json:"id"`
		Jsonrpc string      `json:"jsonrpc"`
		Result  interface{} `json:"result"`
	}
}

// Status returns HTTPResponse.Status
func (r SubmitTaskResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitTaskResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHealthWithBodyWithResponse request with arbitrary body returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, body GetHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// ListGPUProvidersWithBodyWithResponse request with arbitrary body returning *ListGPUProvidersResponse
func (c *ClientWithResponses) ListGPUProvidersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListGPUProvidersResponse, error) {
	rsp, err := c.ListGPUProvidersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGPUProvidersResponse(rsp)
}

func (c *ClientWithResponses) ListGPUProvidersWithResponse(ctx context.Context, body ListGPUProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*ListGPUProvidersResponse, error) {
	rsp, err := c.ListGPUProviders(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGPUProvidersResponse(rsp)
}

// ListPendingTasksWithBodyWithResponse request with arbitrary body returning *ListPendingTasksResponse
func (c *ClientWithResponses) ListPendingTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListPendingTasksResponse, error) {
	rsp, err := c.ListPendingTasksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPendingTasksResponse(rsp)
}

func (c *ClientWithResponses) ListPendingTasksWithResponse(ctx context.Context, body ListPendingTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*ListPendingTasksResponse, error) {
	rsp, err := c.ListPendingTasks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPendingTasksResponse(rsp)
}

// OfferTaskWithBodyWithResponse request with arbitrary body returning *OfferTaskResponse
func (c *ClientWithResponses) OfferTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OfferTaskResponse, error) {
	rsp, err := c.OfferTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOfferTaskResponse(rsp)
}

func (c *ClientWithResponses) OfferTaskWithResponse(ctx context.Context, body OfferTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*OfferTaskResponse, error) {
	rsp, err := c.OfferTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOfferTaskResponse(rsp)
}

// SubmitTaskResultWithBodyWithResponse request with arbitrary body returning *SubmitTaskResultResponse
func (c *ClientWithResponses) SubmitTaskResultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitTaskResultResponse, error) {
	rsp, err := c.SubmitTaskResultWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitTaskResultResponse(rsp)
}

func (c *ClientWithResponses) SubmitTaskResultWithResponse(ctx context.Context, body SubmitTaskResultJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitTaskResultResponse, error) {
	rsp, err := c.SubmitTaskResult(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitTaskResultResponse(rsp)
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *Error            `json:"error,omitempty"`
			Id      int               `json:"id"`
			Jsonrpc string            `json:"jsonrpc"`
			Result  HealthCheckResult `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListGPUProvidersResponse parses an HTTP response from a ListGPUProvidersWithResponse call
func ParseListGPUProvidersResponse(rsp *http.Response) (*ListGPUProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGPUProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *Error        `json:"error,omitempty"`
			Id      int           `json:"id"`
			Jsonrpc string        `json:"jsonrpc"`
			Result  []GPUProvider `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPendingTasksResponse parses an HTTP response from a ListPendingTasksWithResponse call
func ParseListPendingTasksResponse(rsp *http.Response) (*ListPendingTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPendingTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *Error      `json:"error,omitempty"`
			Id      int         `json:"id"`
			Jsonrpc string      `json:"jsonrpc"`
			Result  []TaskOffer `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOfferTaskResponse parses an HTTP response from a OfferTaskWithResponse call
func ParseOfferTaskResponse(rsp *http.Response) (*OfferTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OfferTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubmitTaskResultResponse parses an HTTP response from a SubmitTaskResultWithResponse call
func ParseSubmitTaskResultResponse(rsp *http.Response) (*SubmitTaskResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitTaskResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *Error      `json:"error,omitempty"`
			Id      int         `json:"id"`
			Jsonrpc string      `json:"jsonrpc"`
			Result  interface{} `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
