// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ExtrasBatchImagesRequestResizeMode.
const (
	ExtrasBatchImagesRequestResizeModeN0 ExtrasBatchImagesRequestResizeMode = 0
	ExtrasBatchImagesRequestResizeModeN1 ExtrasBatchImagesRequestResizeMode = 1
)

// Defines values for ExtrasSingleImageRequestResizeMode.
const (
	ExtrasSingleImageRequestResizeModeN0 ExtrasSingleImageRequestResizeMode = 0
	ExtrasSingleImageRequestResizeModeN1 ExtrasSingleImageRequestResizeMode = 1
)

// BodyLoginLoginPost1 defines model for Body_login_login__post.
type BodyLoginLoginPost1 struct {
	ClientId     *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`
	GrantType    *string `json:"grant_type,omitempty"`
	Password     string  `json:"password"`
	Scope        *string `json:"scope,omitempty"`
	Username     string  `json:"username"`
}

// BodyUploadFileUploadPost defines model for Body_upload_file_upload_post.
type BodyUploadFileUploadPost struct {
	Files []openapi_types.File `json:"files"`
}

// CreateResponse defines model for CreateResponse.
type CreateResponse struct {
	// Info Response string from create embedding or hypernetwork task.
	Info string `json:"info"`
}

// EmbeddingItem defines model for EmbeddingItem.
type EmbeddingItem struct {
	// SdCheckpoint The hash of the checkpoint this embedding was trained on, if available
	SdCheckpoint *string `json:"sd_checkpoint,omitempty"`

	// SdCheckpointName The name of the checkpoint this embedding was trained on, if available. Note that this is the name that was used by the trainer; for a stable identifier, use `sd_checkpoint` instead
	SdCheckpointName *string `json:"sd_checkpoint_name,omitempty"`

	// Shape The length of each individual vector in the embedding
	Shape int `json:"shape"`

	// Step The number of steps that were used to train this embedding, if available
	Step *int `json:"step,omitempty"`

	// Vectors The number of vectors in the embedding
	Vectors int `json:"vectors"`
}

// EmbeddingsResponse defines model for EmbeddingsResponse.
type EmbeddingsResponse struct {
	// Loaded Embeddings loaded for the current model
	Loaded map[string]EmbeddingItem `json:"loaded"`

	// Skipped Embeddings skipped for the current model (likely due to architecture incompatibility)
	Skipped map[string]EmbeddingItem `json:"skipped"`
}

// Estimation defines model for Estimation.
type Estimation struct {
	AvgEventConcurrentProcessTime *float32 `json:"avg_event_concurrent_process_time,omitempty"`
	AvgEventProcessTime           *float32 `json:"avg_event_process_time,omitempty"`
	Msg                           *string  `json:"msg,omitempty"`
	QueueEta                      float32  `json:"queue_eta"`
	QueueSize                     int      `json:"queue_size"`
	Rank                          *int     `json:"rank,omitempty"`
	RankEta                       *float32 `json:"rank_eta,omitempty"`
}

// ExtensionItem defines model for ExtensionItem.
type ExtensionItem struct {
	// Branch Extension Repository Branch
	Branch string `json:"branch"`

	// CommitDate Extension Repository Commit Date
	CommitDate string `json:"commit_date"`

	// CommitHash Extension Repository Commit Hash
	CommitHash string `json:"commit_hash"`

	// Enabled Flag specifying whether this extension is enabled
	Enabled bool `json:"enabled"`

	// Name Extension name
	Name string `json:"name"`

	// Remote Extension Repository URL
	Remote string `json:"remote"`

	// Version Extension Version
	Version string `json:"version"`
}

// ExtrasBatchImagesRequest defines model for ExtrasBatchImagesRequest.
type ExtrasBatchImagesRequest struct {
	// CodeformerVisibility Sets the visibility of CodeFormer, values should be between 0 and 1.
	CodeformerVisibility *float32 `json:"codeformer_visibility,omitempty"`

	// CodeformerWeight Sets the weight of CodeFormer, values should be between 0 and 1.
	CodeformerWeight *float32 `json:"codeformer_weight,omitempty"`

	// ExtrasUpscaler2Visibility Sets the visibility of secondary upscaler, values should be between 0 and 1.
	ExtrasUpscaler2Visibility *float32 `json:"extras_upscaler_2_visibility,omitempty"`

	// GfpganVisibility Sets the visibility of GFPGAN, values should be between 0 and 1.
	GfpganVisibility *float32 `json:"gfpgan_visibility,omitempty"`

	// ImageList List of images to work on. Must be Base64 strings
	ImageList []FileData `json:"imageList"`

	// ResizeMode Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.
	ResizeMode *ExtrasBatchImagesRequestResizeMode `json:"resize_mode,omitempty"`

	// ShowExtrasResults Should the backend return the generated image?
	ShowExtrasResults *bool `json:"show_extras_results,omitempty"`

	// UpscaleFirst Should the upscaler run before restoring faces?
	UpscaleFirst *bool `json:"upscale_first,omitempty"`

	// Upscaler1 The name of the main upscaler to use, it has to be one of this list: None , Lanczos , Nearest , ESRGAN_4x , LDSR , R-ESRGAN 4x+ , R-ESRGAN 4x+ Anime6B , ScuNET GAN , ScuNET PSNR , SwinIR 4x
	Upscaler1 *string `json:"upscaler_1,omitempty"`

	// Upscaler2 The name of the secondary upscaler to use, it has to be one of this list: None , Lanczos , Nearest , ESRGAN_4x , LDSR , R-ESRGAN 4x+ , R-ESRGAN 4x+ Anime6B , ScuNET GAN , ScuNET PSNR , SwinIR 4x
	Upscaler2 *string `json:"upscaler_2,omitempty"`

	// UpscalingCrop Should the upscaler crop the image to fit in the chosen size?
	UpscalingCrop *bool `json:"upscaling_crop,omitempty"`

	// UpscalingResize By how much to upscale the image, only used when resize_mode=0.
	UpscalingResize *float32 `json:"upscaling_resize,omitempty"`

	// UpscalingResizeH Target height for the upscaler to hit. Only used when resize_mode=1.
	UpscalingResizeH *int `json:"upscaling_resize_h,omitempty"`

	// UpscalingResizeW Target width for the upscaler to hit. Only used when resize_mode=1.
	UpscalingResizeW *int `json:"upscaling_resize_w,omitempty"`
}

// ExtrasBatchImagesRequestResizeMode Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.
type ExtrasBatchImagesRequestResizeMode int

// ExtrasBatchImagesResponse defines model for ExtrasBatchImagesResponse.
type ExtrasBatchImagesResponse struct {
	// HtmlInfo A series of HTML tags containing the process info.
	HtmlInfo string `json:"html_info"`

	// Images The generated images in base64 format.
	Images []string `json:"images"`
}

// ExtrasSingleImageRequest defines model for ExtrasSingleImageRequest.
type ExtrasSingleImageRequest struct {
	// CodeformerVisibility Sets the visibility of CodeFormer, values should be between 0 and 1.
	CodeformerVisibility *float32 `json:"codeformer_visibility,omitempty"`

	// CodeformerWeight Sets the weight of CodeFormer, values should be between 0 and 1.
	CodeformerWeight *float32 `json:"codeformer_weight,omitempty"`

	// ExtrasUpscaler2Visibility Sets the visibility of secondary upscaler, values should be between 0 and 1.
	ExtrasUpscaler2Visibility *float32 `json:"extras_upscaler_2_visibility,omitempty"`

	// GfpganVisibility Sets the visibility of GFPGAN, values should be between 0 and 1.
	GfpganVisibility *float32 `json:"gfpgan_visibility,omitempty"`

	// Image Image to work on, must be a Base64 string containing the image's data.
	Image *string `json:"image,omitempty"`

	// ResizeMode Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.
	ResizeMode *ExtrasSingleImageRequestResizeMode `json:"resize_mode,omitempty"`

	// ShowExtrasResults Should the backend return the generated image?
	ShowExtrasResults *bool `json:"show_extras_results,omitempty"`

	// UpscaleFirst Should the upscaler run before restoring faces?
	UpscaleFirst *bool `json:"upscale_first,omitempty"`

	// Upscaler1 The name of the main upscaler to use, it has to be one of this list: None , Lanczos , Nearest , ESRGAN_4x , LDSR , R-ESRGAN 4x+ , R-ESRGAN 4x+ Anime6B , ScuNET GAN , ScuNET PSNR , SwinIR 4x
	Upscaler1 *string `json:"upscaler_1,omitempty"`

	// Upscaler2 The name of the secondary upscaler to use, it has to be one of this list: None , Lanczos , Nearest , ESRGAN_4x , LDSR , R-ESRGAN 4x+ , R-ESRGAN 4x+ Anime6B , ScuNET GAN , ScuNET PSNR , SwinIR 4x
	Upscaler2 *string `json:"upscaler_2,omitempty"`

	// UpscalingCrop Should the upscaler crop the image to fit in the chosen size?
	UpscalingCrop *bool `json:"upscaling_crop,omitempty"`

	// UpscalingResize By how much to upscale the image, only used when resize_mode=0.
	UpscalingResize *float32 `json:"upscaling_resize,omitempty"`

	// UpscalingResizeH Target height for the upscaler to hit. Only used when resize_mode=1.
	UpscalingResizeH *int `json:"upscaling_resize_h,omitempty"`

	// UpscalingResizeW Target width for the upscaler to hit. Only used when resize_mode=1.
	UpscalingResizeW *int `json:"upscaling_resize_w,omitempty"`
}

// ExtrasSingleImageRequestResizeMode Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.
type ExtrasSingleImageRequestResizeMode int

// ExtrasSingleImageResponse defines model for ExtrasSingleImageResponse.
type ExtrasSingleImageResponse struct {
	// HtmlInfo A series of HTML tags containing the process info.
	HtmlInfo string `json:"html_info"`

	// Image The generated image in base64 format.
	Image *string `json:"image,omitempty"`
}

// FaceRestorerItem defines model for FaceRestorerItem.
type FaceRestorerItem struct {
	CmdDir *string `json:"cmd_dir,omitempty"`
	Name   string  `json:"name"`
}

// FileData defines model for FileData.
type FileData struct {
	// Data Base64 representation of the file
	Data string `json:"data"`
	Name string `json:"name"`
}

// Flags defines model for Flags.
type Flags struct {
	// AddStopRoute does not do anything
	AddStopRoute *bool `json:"add_stop_route,omitempty"`

	// Administrator Administrator rights
	Administrator *bool `json:"administrator,omitempty"`

	// AllowCode allow custom script execution from webui
	AllowCode *bool `json:"allow_code,omitempty"`

	// AlwaysBatchCondUncond does not do anything
	AlwaysBatchCondUncond *bool `json:"always_batch_cond_uncond,omitempty"`

	// Api use api=True to launch the API together with the webui (use --nowebui instead for only the API)
	Api *bool `json:"api,omitempty"`

	// ApiAuth Set authentication for API like "username:password"; or comma-delimit multiple like "u1:p1,u2:p2,u3:p3"
	ApiAuth *string `json:"api_auth,omitempty"`

	// ApiLog use api-log=True to enable logging of all API requests
	ApiLog *bool `json:"api_log,omitempty"`

	// ApiServerStop enable server stop/restart/kill via api
	ApiServerStop *bool `json:"api_server_stop,omitempty"`

	// Autolaunch open the webui URL in the system's default browser upon launch
	Autolaunch *bool `json:"autolaunch,omitempty"`

	// BsrganModelsPath Path to directory with BSRGAN model file(s).
	BsrganModelsPath *string `json:"bsrgan_models_path,omitempty"`

	// Ckpt path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded
	Ckpt *string `json:"ckpt,omitempty"`

	// CkptDir Path to directory with stable diffusion checkpoints
	CkptDir *string `json:"ckpt_dir,omitempty"`

	// ClipModelsPath Path to directory with CLIP model file(s).
	ClipModelsPath *string `json:"clip_models_path,omitempty"`

	// CodeformerModelsPath Path to directory with codeformer model file(s).
	CodeformerModelsPath *string `json:"codeformer_models_path,omitempty"`

	// Config path to config which constructs model
	Config *string `json:"config,omitempty"`

	// CorsAllowOrigins Allowed CORS origin(s) in the form of a comma-separated list (no spaces)
	CorsAllowOrigins *string `json:"cors_allow_origins,omitempty"`

	// CorsAllowOriginsRegex Allowed CORS origin(s) in the form of a single regular expression
	CorsAllowOriginsRegex *string `json:"cors_allow_origins_regex,omitempty"`

	// DataDir base path where all user data is stored
	DataDir *string `json:"data_dir,omitempty"`

	// Deepdanbooru does not do anything
	Deepdanbooru *bool `json:"deepdanbooru,omitempty"`

	// DeviceId Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES=0,1,etc might be needed before)
	DeviceId *string `json:"device_id,omitempty"`

	// DisableAllExtensions prevent all extensions from running regardless of any other settings
	DisableAllExtensions *bool `json:"disable_all_extensions,omitempty"`

	// DisableConsoleProgressbars do not output progressbars to console
	DisableConsoleProgressbars *bool `json:"disable_console_progressbars,omitempty"`

	// DisableExtraExtensions prevent all extensions except built-in from running regardless of any other settings
	DisableExtraExtensions *bool `json:"disable_extra_extensions,omitempty"`

	// DisableModelLoadingRamOptimization disable an optimization that reduces RAM use when loading a model
	DisableModelLoadingRamOptimization *bool `json:"disable_model_loading_ram_optimization,omitempty"`

	// DisableNanCheck do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI
	DisableNanCheck *bool `json:"disable_nan_check,omitempty"`

	// DisableOptSplitAttention prefer no cross-attention layer optimization for automatic choice of optimization
	DisableOptSplitAttention *bool `json:"disable_opt_split_attention,omitempty"`

	// DisableSafeUnpickle disable checking pytorch models for malicious code
	DisableSafeUnpickle *bool `json:"disable_safe_unpickle,omitempty"`

	// DisableTlsVerify When passed, enables the use of self-signed certificates.
	DisableTlsVerify *string `json:"disable_tls_verify,omitempty"`

	// DoNotDownloadClip do not download CLIP model even if it's not included in the checkpoint
	DoNotDownloadClip *bool `json:"do_not_download_clip,omitempty"`

	// DumpSysinfo launch.py argument: dump limited sysinfo file (without information about extensions, options) to disk and quit
	DumpSysinfo *bool `json:"dump_sysinfo,omitempty"`

	// EmbeddingsDir embeddings directory for textual inversion (default: embeddings)
	EmbeddingsDir *string `json:"embeddings_dir,omitempty"`

	// EnableConsolePrompts does not do anything
	EnableConsolePrompts *bool `json:"enable_console_prompts,omitempty"`

	// EnableInsecureExtensionAccess enable extensions tab regardless of other options
	EnableInsecureExtensionAccess *bool `json:"enable_insecure_extension_access,omitempty"`

	// EsrganModelsPath Path to directory with ESRGAN model file(s).
	EsrganModelsPath *string `json:"esrgan_models_path,omitempty"`

	// F ==SUPPRESS==
	F *bool `json:"f,omitempty"`

	// ForceEnableXformers enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work
	ForceEnableXformers *bool `json:"force_enable_xformers,omitempty"`

	// FreezeSettings disable editing settings
	FreezeSettings *bool `json:"freeze_settings,omitempty"`

	// GfpganDir GFPGAN directory
	GfpganDir *string `json:"gfpgan_dir,omitempty"`

	// GfpganModel GFPGAN model file name
	GfpganModel *string `json:"gfpgan_model,omitempty"`

	// GfpganModelsPath Path to directory with GFPGAN model file(s).
	GfpganModelsPath *string `json:"gfpgan_models_path,omitempty"`

	// GradioAllowedPath add path to gradio's allowed_paths, make it possible to serve files from it
	GradioAllowedPath *[]interface{} `json:"gradio_allowed_path,omitempty"`

	// GradioAuth set gradio authentication like "username:password"; or comma-delimit multiple like "u1:p1,u2:p2,u3:p3"
	GradioAuth *string `json:"gradio_auth,omitempty"`

	// GradioAuthPath set gradio authentication file path ex. "/path/to/auth/file" same auth format as --gradio-auth
	GradioAuthPath *string `json:"gradio_auth_path,omitempty"`

	// GradioDebug launch gradio with --debug option
	GradioDebug *bool `json:"gradio_debug,omitempty"`

	// GradioImg2imgTool does not do anything
	GradioImg2imgTool *string `json:"gradio_img2img_tool,omitempty"`

	// GradioInpaintTool does not do anything
	GradioInpaintTool *string `json:"gradio_inpaint_tool,omitempty"`

	// GradioQueue does not do anything
	GradioQueue *bool `json:"gradio_queue,omitempty"`

	// HideUiDirConfig hide directory configuration from webui
	HideUiDirConfig *bool `json:"hide_ui_dir_config,omitempty"`

	// HypernetworkDir hypernetwork directory
	HypernetworkDir *string `json:"hypernetwork_dir,omitempty"`

	// LdsrModelsPath Path to directory with LDSR model file(s).
	LdsrModelsPath *string `json:"ldsr_models_path,omitempty"`

	// Listen launch gradio with 0.0.0.0 as server name, allowing to respond to network requests
	Listen *bool `json:"listen,omitempty"`

	// LocalizationsDir localizations directory
	LocalizationsDir *string `json:"localizations_dir,omitempty"`

	// LogStartup launch.py argument: print a detailed log of what's happening at startup
	LogStartup *bool `json:"log_startup,omitempty"`

	// Loglevel log level; one of: CRITICAL, ERROR, WARNING, INFO, DEBUG
	Loglevel *string `json:"loglevel,omitempty"`

	// LoraDir Path to directory with Lora networks.
	LoraDir *string `json:"lora_dir,omitempty"`

	// Lowram load stable diffusion checkpoint weights to VRAM instead of RAM
	Lowram *bool `json:"lowram,omitempty"`

	// Lowvram enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage
	Lowvram *bool `json:"lowvram,omitempty"`

	// LycoDirBackcompat Path to directory with LyCORIS networks (for backawards compatibility; can also use --lyco-dir).
	LycoDirBackcompat *string `json:"lyco_dir_backcompat,omitempty"`

	// MaxBatchCount maximum batch count value for the UI
	MaxBatchCount *int `json:"max_batch_count,omitempty"`

	// Medvram enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage
	Medvram *bool `json:"medvram,omitempty"`

	// MedvramSdxl enable --medvram optimization just for SDXL models
	MedvramSdxl *bool `json:"medvram_sdxl,omitempty"`

	// Ngrok ngrok authtoken, alternative to gradio --share
	Ngrok *string `json:"ngrok,omitempty"`

	// NgrokOptions The options to pass to ngrok in JSON format, e.g.: '{"authtoken_from_env":true, "basic_auth":"user:password", "oauth_provider":"google", "oauth_allow_emails":"user@asdf.com"}'
	NgrokOptions *map[string]interface{} `json:"ngrok_options,omitempty"`

	// NgrokRegion does not do anything.
	NgrokRegion *string `json:"ngrok_region,omitempty"`

	// NoDownloadSdModel don't download SD1.5 model even if no model is found in --ckpt-dir
	NoDownloadSdModel *bool `json:"no_download_sd_model,omitempty"`

	// NoGradioQueue Disables gradio queue; causes the webpage to use http requests instead of websockets; was the default in earlier versions
	NoGradioQueue *bool `json:"no_gradio_queue,omitempty"`

	// NoHalf do not switch the model to 16-bit floats
	NoHalf *bool `json:"no_half,omitempty"`

	// NoHalfVae do not switch the VAE model to 16-bit floats
	NoHalfVae *bool `json:"no_half_vae,omitempty"`

	// NoHashing disable sha256 hashing of checkpoints to help loading performance
	NoHashing *bool `json:"no_hashing,omitempty"`

	// NoProgressbarHiding do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser)
	NoProgressbarHiding *bool `json:"no_progressbar_hiding,omitempty"`

	// Nowebui use api=True to launch the API instead of the webui
	Nowebui *bool `json:"nowebui,omitempty"`

	// OptChannelslast change memory type for stable diffusion to channels last
	OptChannelslast *bool `json:"opt_channelslast,omitempty"`

	// OptSdpAttention prefer scaled dot product cross-attention layer optimization for automatic choice of optimization; requires PyTorch 2.*
	OptSdpAttention *bool `json:"opt_sdp_attention,omitempty"`

	// OptSdpNoMemAttention prefer scaled dot product cross-attention layer optimization without memory efficient attention for automatic choice of optimization, makes image generation deterministic; requires PyTorch 2.*
	OptSdpNoMemAttention *bool `json:"opt_sdp_no_mem_attention,omitempty"`

	// OptSplitAttention prefer Doggettx's cross-attention layer optimization for automatic choice of optimization
	OptSplitAttention *bool `json:"opt_split_attention,omitempty"`

	// OptSplitAttentionInvokeai prefer InvokeAI's cross-attention layer optimization for automatic choice of optimization
	OptSplitAttentionInvokeai *bool `json:"opt_split_attention_invokeai,omitempty"`

	// OptSplitAttentionV1 prefer older version of split attention optimization for automatic choice of optimization
	OptSplitAttentionV1 *bool `json:"opt_split_attention_v1,omitempty"`

	// OptSubQuadAttention prefer memory efficient sub-quadratic cross-attention layer optimization for automatic choice of optimization
	OptSubQuadAttention *bool `json:"opt_sub_quad_attention,omitempty"`

	// Port launch gradio with given server port, you need root/admin rights for ports < 1024, defaults to 7860 if available
	Port *string `json:"port,omitempty"`

	// Precision evaluate at this precision
	Precision *string `json:"precision,omitempty"`

	// RealesrganModelsPath Path to directory with RealESRGAN model file(s).
	RealesrganModelsPath *string `json:"realesrgan_models_path,omitempty"`

	// ReinstallTorch launch.py argument: install the appropriate version of torch even if you have some version already installed
	ReinstallTorch *bool `json:"reinstall_torch,omitempty"`

	// ReinstallXformers launch.py argument: install the appropriate version of xformers even if you have some version already installed
	ReinstallXformers *bool `json:"reinstall_xformers,omitempty"`

	// ScunetModelsPath Path to directory with ScuNET model file(s).
	ScunetModelsPath *string `json:"scunet_models_path,omitempty"`

	// ServerName Sets hostname of server
	ServerName *string `json:"server_name,omitempty"`

	// Share use share=True for gradio and make the UI accessible through their site
	Share *bool `json:"share,omitempty"`

	// ShowNegativePrompt does not do anything
	ShowNegativePrompt *bool `json:"show_negative_prompt,omitempty"`

	// SkipInstall launch.py argument: skip installation of packages
	SkipInstall *bool `json:"skip_install,omitempty"`

	// SkipLoadModelAtStart if load a model at web start, only take effect when --nowebui
	SkipLoadModelAtStart *bool `json:"skip_load_model_at_start,omitempty"`

	// SkipPrepareEnvironment launch.py argument: skip all environment preparation
	SkipPrepareEnvironment *bool `json:"skip_prepare_environment,omitempty"`

	// SkipPythonVersionCheck launch.py argument: do not check python version
	SkipPythonVersionCheck *bool `json:"skip_python_version_check,omitempty"`

	// SkipTorchCudaTest launch.py argument: do not check if CUDA is able to work properly
	SkipTorchCudaTest *bool `json:"skip_torch_cuda_test,omitempty"`

	// SkipVersionCheck Do not check versions of torch and xformers
	SkipVersionCheck *bool `json:"skip_version_check,omitempty"`

	// StylesFile filename to use for styles
	StylesFile *string `json:"styles_file,omitempty"`

	// SubQuadChunkThreshold the percentage of VRAM threshold for the sub-quadratic cross-attention layer optimization to use chunking
	SubQuadChunkThreshold *string `json:"sub_quad_chunk_threshold,omitempty"`

	// SubQuadKvChunkSize kv chunk size for the sub-quadratic cross-attention layer optimization to use
	SubQuadKvChunkSize *string `json:"sub_quad_kv_chunk_size,omitempty"`

	// SubQuadQChunkSize query chunk size for the sub-quadratic cross-attention layer optimization to use
	SubQuadQChunkSize *int `json:"sub_quad_q_chunk_size,omitempty"`

	// Subpath customize the subpath for gradio, use with reverse proxy
	Subpath *string `json:"subpath,omitempty"`

	// SwinirModelsPath Path to directory with SwinIR model file(s).
	SwinirModelsPath *string `json:"swinir_models_path,omitempty"`

	// TestServer launch.py argument: configure server for testing
	TestServer *bool `json:"test_server,omitempty"`

	// TextualInversionTemplatesDir directory with textual inversion templates
	TextualInversionTemplatesDir *string `json:"textual_inversion_templates_dir,omitempty"`

	// Theme launches the UI with light or dark theme
	Theme *string `json:"theme,omitempty"`

	// TimeoutKeepAlive set timeout_keep_alive for uvicorn
	TimeoutKeepAlive *int `json:"timeout_keep_alive,omitempty"`

	// TlsCertfile Partially enables TLS, requires --tls-keyfile to fully function
	TlsCertfile *string `json:"tls_certfile,omitempty"`

	// TlsKeyfile Partially enables TLS, requires --tls-certfile to fully function
	TlsKeyfile *string `json:"tls_keyfile,omitempty"`

	// UiConfigFile filename to use for ui configuration
	UiConfigFile *string `json:"ui_config_file,omitempty"`

	// UiDebugMode Don't load model to quickly launch UI
	UiDebugMode *bool `json:"ui_debug_mode,omitempty"`

	// UiSettingsFile filename to use for ui settings
	UiSettingsFile *string `json:"ui_settings_file,omitempty"`

	// UnloadGfpgan does not do anything.
	UnloadGfpgan *bool `json:"unload_gfpgan,omitempty"`

	// UpcastSampling upcast sampling. No effect with --no-half. Usually produces similar results to --no-half with better performance while using less memory.
	UpcastSampling *bool `json:"upcast_sampling,omitempty"`

	// UpdateAllExtensions launch.py argument: download updates for all extensions when starting the program
	UpdateAllExtensions *bool `json:"update_all_extensions,omitempty"`

	// UpdateCheck launch.py argument: check for updates at startup
	UpdateCheck *bool `json:"update_check,omitempty"`

	// UseCpu use CPU as torch device for specified modules
	UseCpu *[]interface{} `json:"use_cpu,omitempty"`

	// UseIpex use Intel XPU as torch device
	UseIpex *bool `json:"use_ipex,omitempty"`

	// UseTextboxSeed use textbox for seeds in UI (no up/down, but possible to input long seeds)
	UseTextboxSeed *bool `json:"use_textbox_seed,omitempty"`

	// VaeDir Path to directory with VAE files
	VaeDir *string `json:"vae_dir,omitempty"`

	// VaePath Checkpoint to use as VAE; setting this argument disables all settings related to VAE
	VaePath *string `json:"vae_path,omitempty"`

	// Xformers enable xformers for cross attention layers
	Xformers *bool `json:"xformers,omitempty"`

	// XformersFlashAttention enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only)
	XformersFlashAttention *bool `json:"xformers_flash_attention,omitempty"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// HypernetworkItem defines model for HypernetworkItem.
type HypernetworkItem struct {
	Name string  `json:"name"`
	Path *string `json:"path,omitempty"`
}

// ImageToImageResponse defines model for ImageToImageResponse.
type ImageToImageResponse struct {
	// Images The generated image in base64 format.
	Images     *[]string              `json:"images,omitempty"`
	Info       string                 `json:"info"`
	Parameters map[string]interface{} `json:"parameters"`
}

// InterrogateRequest defines model for InterrogateRequest.
type InterrogateRequest struct {
	// Image Image to work on, must be a Base64 string containing the image's data.
	Image *string `json:"image,omitempty"`

	// Model The interrogate model used.
	Model *string `json:"model,omitempty"`
}

// LatentUpscalerModeItem defines model for LatentUpscalerModeItem.
type LatentUpscalerModeItem struct {
	Name string `json:"name"`
}

// MemoryResponse defines model for MemoryResponse.
type MemoryResponse struct {
	// Cuda nVidia CUDA memory stats
	Cuda map[string]interface{} `json:"cuda"`

	// Ram System memory stats
	Ram map[string]interface{} `json:"ram"`
}

// Options defines model for Options.
type Options struct {
	// CLIPStopAtLastLayers Clip skip
	CLIPStopAtLastLayers *float32 `json:"CLIP_stop_at_last_layers,omitempty"`

	// ESRGANTile Tile size for ESRGAN upscalers.
	ESRGANTile *float32 `json:"ESRGAN_tile,omitempty"`

	// ESRGANTileOverlap Tile overlap for ESRGAN upscalers.
	ESRGANTileOverlap *float32 `json:"ESRGAN_tile_overlap,omitempty"`

	// AddModelHashToInfo Add model hash to infotext
	AddModelHashToInfo *bool `json:"add_model_hash_to_info,omitempty"`

	// AddModelNameToInfo Add model name to infotext
	AddModelNameToInfo *bool `json:"add_model_name_to_info,omitempty"`

	// AddUserNameToInfo Add user name to infotext when authenticated
	AddUserNameToInfo *interface{} `json:"add_user_name_to_info,omitempty"`

	// AddVaeHashToInfo Add VAE hash to infotext
	AddVaeHashToInfo *bool `json:"add_vae_hash_to_info,omitempty"`

	// AddVaeNameToInfo Add VAE name to infotext
	AddVaeNameToInfo *bool `json:"add_vae_name_to_info,omitempty"`

	// AddVersionToInfotext Add program version to infotext
	AddVersionToInfotext *bool `json:"add_version_to_infotext,omitempty"`

	// AlwaysDiscardNextToLastSigma Always discard next-to-last sigma
	AlwaysDiscardNextToLastSigma *interface{} `json:"always_discard_next_to_last_sigma,omitempty"`

	// ApiEnableRequests Allow http:// and https:// URLs for input images in API
	ApiEnableRequests *bool `json:"api_enable_requests,omitempty"`

	// ApiForbidLocalRequests Forbid URLs to local resources
	ApiForbidLocalRequests *bool `json:"api_forbid_local_requests,omitempty"`

	// ApiUseragent User agent for requests
	ApiUseragent *interface{} `json:"api_useragent,omitempty"`

	// AutoLaunchBrowser Automatically open webui in browser on startup
	AutoLaunchBrowser *string `json:"auto_launch_browser,omitempty"`

	// AutoVaePrecision Automatically revert VAE to 32-bit floats
	AutoVaePrecision *bool `json:"auto_vae_precision,omitempty"`

	// BatchCondUncond Batch cond/uncond
	BatchCondUncond *bool `json:"batch_cond_uncond,omitempty"`

	// CanvasAutoExpand Automatically expands an image that does not fit completely in the canvas area, similar to manually pressing the S and R buttons
	CanvasAutoExpand *bool `json:"canvas_auto_expand,omitempty"`

	// CanvasBlurPrompt Take the focus off the prompt when working with a canvas
	CanvasBlurPrompt *interface{} `json:"canvas_blur_prompt,omitempty"`

	// CanvasDisabledFunctions Disable function that you don't use
	CanvasDisabledFunctions *[]interface{} `json:"canvas_disabled_functions,omitempty"`

	// CanvasHotkeyAdjust Adjust brush size
	CanvasHotkeyAdjust *string `json:"canvas_hotkey_adjust,omitempty"`

	// CanvasHotkeyFullscreen Fullscreen Mode, maximizes the picture so that it fits into the screen and stretches it to its full width
	CanvasHotkeyFullscreen *string `json:"canvas_hotkey_fullscreen,omitempty"`

	// CanvasHotkeyMove Moving the canvas
	CanvasHotkeyMove *string `json:"canvas_hotkey_move,omitempty"`

	// CanvasHotkeyOverlap Toggle overlap
	CanvasHotkeyOverlap *string `json:"canvas_hotkey_overlap,omitempty"`

	// CanvasHotkeyReset Reset zoom and canvas positon
	CanvasHotkeyReset *string `json:"canvas_hotkey_reset,omitempty"`

	// CanvasHotkeyZoom Zoom canvas
	CanvasHotkeyZoom *string `json:"canvas_hotkey_zoom,omitempty"`

	// CanvasShowTooltip Enable tooltip on the canvas
	CanvasShowTooltip *bool `json:"canvas_show_tooltip,omitempty"`

	// CleanTempDirAtStart Cleanup non-default temporary directory when starting webui
	CleanTempDirAtStart *interface{} `json:"clean_temp_dir_at_start,omitempty"`

	// CodeFormerWeight CodeFormer weight
	CodeFormerWeight *float32 `json:"code_former_weight,omitempty"`

	// CommaPaddingBacktrack Prompt word wrap length limit
	CommaPaddingBacktrack *float32 `json:"comma_padding_backtrack,omitempty"`

	// CompactPromptBox Compact prompt layout
	CompactPromptBox *interface{} `json:"compact_prompt_box,omitempty"`

	// CrossAttentionOptimization Cross attention optimization
	CrossAttentionOptimization *string `json:"cross_attention_optimization,omitempty"`

	// DatasetFilenameJoinString Filename join string
	DatasetFilenameJoinString *string `json:"dataset_filename_join_string,omitempty"`

	// DatasetFilenameWordRegex Filename word regex
	DatasetFilenameWordRegex *interface{} `json:"dataset_filename_word_regex,omitempty"`

	// DdimDiscretize img2img DDIM discretize
	DdimDiscretize *string `json:"ddim_discretize,omitempty"`

	// DeepbooruEscape deepbooru: escape (\) brackets
	DeepbooruEscape *bool `json:"deepbooru_escape,omitempty"`

	// DeepbooruFilterTags deepbooru: filter out those tags
	DeepbooruFilterTags *interface{} `json:"deepbooru_filter_tags,omitempty"`

	// DeepbooruSortAlpha deepbooru: sort tags alphabetically
	DeepbooruSortAlpha *bool `json:"deepbooru_sort_alpha,omitempty"`

	// DeepbooruUseSpaces deepbooru: use spaces in tags
	DeepbooruUseSpaces *bool `json:"deepbooru_use_spaces,omitempty"`

	// DimensionsAndBatchTogether Show Width/Height and Batch sliders in same row
	DimensionsAndBatchTogether *bool `json:"dimensions_and_batch_together,omitempty"`

	// DirectoriesFilenamePattern Directory name pattern
	DirectoriesFilenamePattern *string `json:"directories_filename_pattern,omitempty"`

	// DirectoriesMaxPromptWords Max prompt words for [prompt_words] pattern
	DirectoriesMaxPromptWords *float32 `json:"directories_max_prompt_words,omitempty"`

	// DisableAllExtensions Disable all extensions (preserves the list of disabled extensions)
	DisableAllExtensions *string `json:"disable_all_extensions,omitempty"`

	// DisableMmapLoadSafetensors Disable memmapping for loading .safetensors files.
	DisableMmapLoadSafetensors *interface{} `json:"disable_mmap_load_safetensors,omitempty"`

	// DisableTokenCounters Disable prompt token counters
	DisableTokenCounters *interface{} `json:"disable_token_counters,omitempty"`

	// DisableWeightsAutoSwap Disregard checkpoint information from pasted infotext
	DisableWeightsAutoSwap *bool `json:"disable_weights_auto_swap,omitempty"`

	// DisabledExtensions Disable these extensions
	DisabledExtensions *interface{} `json:"disabled_extensions,omitempty"`

	// DoNotShowImages Do not show any images in gallery
	DoNotShowImages *interface{} `json:"do_not_show_images,omitempty"`

	// DontFixSecondOrderSamplersSchedule Do not fix prompt schedule for second order samplers.
	DontFixSecondOrderSamplersSchedule *interface{} `json:"dont_fix_second_order_samplers_schedule,omitempty"`

	// DumpStacksOnSignal Print stack traces before exiting the program with ctrl+c.
	DumpStacksOnSignal *interface{} `json:"dump_stacks_on_signal,omitempty"`

	// EnableBatchSeeds Make K-diffusion samplers produce same images in a batch as when making a single image
	EnableBatchSeeds *bool `json:"enable_batch_seeds,omitempty"`

	// EnableConsolePrompts Print prompts to console when generating with txt2img and img2img.
	EnableConsolePrompts *interface{} `json:"enable_console_prompts,omitempty"`

	// EnableEmphasis Enable emphasis
	EnableEmphasis *bool `json:"enable_emphasis,omitempty"`

	// EnablePnginfo Write infotext to metadata of the generated image
	EnablePnginfo *bool `json:"enable_pnginfo,omitempty"`

	// EnableQuantization Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds
	EnableQuantization *interface{} `json:"enable_quantization,omitempty"`

	// EtaAncestral Eta for k-diffusion samplers
	EtaAncestral *float32 `json:"eta_ancestral,omitempty"`

	// EtaDdim Eta for DDIM
	EtaDdim *interface{} `json:"eta_ddim,omitempty"`

	// EtaNoiseSeedDelta Eta noise seed delta
	EtaNoiseSeedDelta *interface{} `json:"eta_noise_seed_delta,omitempty"`

	// ExportFor4chan Save copy of large images as JPG
	ExportFor4chan *bool `json:"export_for_4chan,omitempty"`

	// ExtraNetworksAddTextSeparator Extra networks separator
	ExtraNetworksAddTextSeparator *string `json:"extra_networks_add_text_separator,omitempty"`

	// ExtraNetworksCardHeight Card height for Extra Networks
	ExtraNetworksCardHeight *interface{} `json:"extra_networks_card_height,omitempty"`

	// ExtraNetworksCardOrder Default order for Extra Networks cards
	ExtraNetworksCardOrder *string `json:"extra_networks_card_order,omitempty"`

	// ExtraNetworksCardOrderField Default order field for Extra Networks cards
	ExtraNetworksCardOrderField *string `json:"extra_networks_card_order_field,omitempty"`

	// ExtraNetworksCardShowDesc Show description on card
	ExtraNetworksCardShowDesc *bool `json:"extra_networks_card_show_desc,omitempty"`

	// ExtraNetworksCardTextScale Card text scale
	ExtraNetworksCardTextScale *float32 `json:"extra_networks_card_text_scale,omitempty"`

	// ExtraNetworksCardWidth Card width for Extra Networks
	ExtraNetworksCardWidth *interface{} `json:"extra_networks_card_width,omitempty"`

	// ExtraNetworksDefaultMultiplier Default multiplier for extra networks
	ExtraNetworksDefaultMultiplier *float32 `json:"extra_networks_default_multiplier,omitempty"`

	// ExtraNetworksDirButtonFunction Add a '/' to the beginning of directory buttons
	ExtraNetworksDirButtonFunction *interface{} `json:"extra_networks_dir_button_function,omitempty"`

	// ExtraNetworksHiddenModels Show cards for models in hidden directories
	ExtraNetworksHiddenModels *string `json:"extra_networks_hidden_models,omitempty"`

	// ExtraNetworksShowHiddenDirectories Show hidden directories
	ExtraNetworksShowHiddenDirectories *bool `json:"extra_networks_show_hidden_directories,omitempty"`

	// ExtraOptionsAccordion Place added settings into an accordion
	ExtraOptionsAccordion *interface{} `json:"extra_options_accordion,omitempty"`

	// ExtraOptionsCols Number of columns for added settings
	ExtraOptionsCols *float32 `json:"extra_options_cols,omitempty"`

	// ExtraOptionsImg2img Settings for img2img
	ExtraOptionsImg2img *interface{} `json:"extra_options_img2img,omitempty"`

	// ExtraOptionsTxt2img Settings for txt2img
	ExtraOptionsTxt2img *interface{} `json:"extra_options_txt2img,omitempty"`

	// FaceRestoration Restore faces
	FaceRestoration *interface{} `json:"face_restoration,omitempty"`

	// FaceRestorationModel Face restoration model
	FaceRestorationModel *string `json:"face_restoration_model,omitempty"`

	// FaceRestorationUnload Move face restoration model from VRAM into RAM after processing
	FaceRestorationUnload *interface{} `json:"face_restoration_unload,omitempty"`

	// Font Font for image grids that have text
	Font *interface{} `json:"font,omitempty"`

	// GalleryHeight Gallery height
	GalleryHeight *interface{} `json:"gallery_height,omitempty"`

	// GradioTheme Gradio theme
	GradioTheme *string `json:"gradio_theme,omitempty"`

	// GradioThemesCache Cache gradio themes locally
	GradioThemesCache *bool `json:"gradio_themes_cache,omitempty"`

	// GridBackgroundColor Background color for image grids
	GridBackgroundColor *string `json:"grid_background_color,omitempty"`

	// GridExtendedFilename Add extended info (seed, prompt) to filename when saving grid
	GridExtendedFilename *interface{} `json:"grid_extended_filename,omitempty"`

	// GridFormat File format for grids
	GridFormat *string `json:"grid_format,omitempty"`

	// GridOnlyIfMultiple Do not save grids consisting of one picture
	GridOnlyIfMultiple *bool `json:"grid_only_if_multiple,omitempty"`

	// GridPreventEmptySpots Prevent empty spots in grid (when set to autodetect)
	GridPreventEmptySpots *interface{} `json:"grid_prevent_empty_spots,omitempty"`

	// GridSave Always save all generated image grids
	GridSave *bool `json:"grid_save,omitempty"`

	// GridSaveToDirs Save grids to a subdirectory
	GridSaveToDirs *bool `json:"grid_save_to_dirs,omitempty"`

	// GridTextActiveColor Text color for image grids
	GridTextActiveColor *string `json:"grid_text_active_color,omitempty"`

	// GridTextInactiveColor Inactive text color for image grids
	GridTextInactiveColor *string `json:"grid_text_inactive_color,omitempty"`

	// GridZipFilenamePattern Archive filename pattern
	GridZipFilenamePattern *interface{} `json:"grid_zip_filename_pattern,omitempty"`

	// HiddenTabs Hidden UI tabs
	HiddenTabs *interface{} `json:"hidden_tabs,omitempty"`

	// HideLdmPrints Prevent Stability-AI's ldm/sgm modules from printing noise to console.
	HideLdmPrints *bool `json:"hide_ldm_prints,omitempty"`

	// HideSamplers Hide samplers in user interface
	HideSamplers *interface{} `json:"hide_samplers,omitempty"`

	// HiresFixRefinerPass Hires fix: which pass to enable refiner for
	HiresFixRefinerPass *string `json:"hires_fix_refiner_pass,omitempty"`

	// HiresFixShowPrompts Hires fix: show hires prompt and negative prompt
	HiresFixShowPrompts *interface{} `json:"hires_fix_show_prompts,omitempty"`

	// HiresFixShowSampler Hires fix: show hires checkpoint and sampler selection
	HiresFixShowSampler *interface{} `json:"hires_fix_show_sampler,omitempty"`

	// HiresFixUseFirstpassConds For hires fix, calculate conds of second pass using extra networks of first pass.
	HiresFixUseFirstpassConds *interface{} `json:"hires_fix_use_firstpass_conds,omitempty"`

	// Img2imgBackgroundColor With img2img, fill transparent parts of the input image with this color.
	Img2imgBackgroundColor *string `json:"img2img_background_color,omitempty"`

	// Img2imgBatchShowResultsLimit Show the first N batch img2img results in UI
	Img2imgBatchShowResultsLimit *float32 `json:"img2img_batch_show_results_limit,omitempty"`

	// Img2imgColorCorrection Apply color correction to img2img results to match original colors.
	Img2imgColorCorrection *interface{} `json:"img2img_color_correction,omitempty"`

	// Img2imgEditorHeight Height of the image editor
	Img2imgEditorHeight *float32 `json:"img2img_editor_height,omitempty"`

	// Img2imgExtraNoise Extra noise multiplier for img2img and hires fix
	Img2imgExtraNoise *interface{} `json:"img2img_extra_noise,omitempty"`

	// Img2imgFixSteps With img2img, do exactly the amount of steps the slider specifies.
	Img2imgFixSteps *interface{} `json:"img2img_fix_steps,omitempty"`

	// Img2imgInpaintMaskBrushColor Inpaint mask brush color
	Img2imgInpaintMaskBrushColor *string `json:"img2img_inpaint_mask_brush_color,omitempty"`

	// Img2imgInpaintSketchDefaultBrushColor Inpaint sketch initial brush color
	Img2imgInpaintSketchDefaultBrushColor *string `json:"img2img_inpaint_sketch_default_brush_color,omitempty"`

	// Img2imgSettingsAccordion Settings in img2img hidden under Accordion
	Img2imgSettingsAccordion *interface{} `json:"img2img_settings_accordion,omitempty"`

	// Img2imgSketchDefaultBrushColor Sketch initial brush color
	Img2imgSketchDefaultBrushColor *string `json:"img2img_sketch_default_brush_color,omitempty"`

	// ImgDownscaleThreshold File size limit for the above option, MB
	ImgDownscaleThreshold *float32 `json:"img_downscale_threshold,omitempty"`

	// ImgMaxSizeMp Maximum image size
	ImgMaxSizeMp        *float32 `json:"img_max_size_mp,omitempty"`
	InfotextExplanation *string  `json:"infotext_explanation,omitempty"`

	// InfotextSkipPasting Disregard fields from pasted infotext
	InfotextSkipPasting *interface{} `json:"infotext_skip_pasting,omitempty"`

	// InfotextStyles Infer styles from prompts of pasted infotext
	InfotextStyles *string `json:"infotext_styles,omitempty"`

	// InitialNoiseMultiplier Noise multiplier for img2img
	InitialNoiseMultiplier *float32 `json:"initial_noise_multiplier,omitempty"`

	// InpaintingMaskWeight Inpainting conditioning mask strength
	InpaintingMaskWeight *float32 `json:"inpainting_mask_weight,omitempty"`

	// InterrogateClipDictLimit CLIP: maximum number of lines in text file
	InterrogateClipDictLimit *float32 `json:"interrogate_clip_dict_limit,omitempty"`

	// InterrogateClipMaxLength BLIP: maximum description length
	InterrogateClipMaxLength *float32 `json:"interrogate_clip_max_length,omitempty"`

	// InterrogateClipMinLength BLIP: minimum description length
	InterrogateClipMinLength *float32 `json:"interrogate_clip_min_length,omitempty"`

	// InterrogateClipNumBeams BLIP: num_beams
	InterrogateClipNumBeams *float32 `json:"interrogate_clip_num_beams,omitempty"`

	// InterrogateClipSkipCategories CLIP: skip inquire categories
	InterrogateClipSkipCategories *interface{} `json:"interrogate_clip_skip_categories,omitempty"`

	// InterrogateDeepbooruScoreThreshold deepbooru: score threshold
	InterrogateDeepbooruScoreThreshold *float32 `json:"interrogate_deepbooru_score_threshold,omitempty"`

	// InterrogateKeepModelsInMemory Keep models in VRAM
	InterrogateKeepModelsInMemory *interface{} `json:"interrogate_keep_models_in_memory,omitempty"`

	// InterrogateReturnRanks Include ranks of model tags matches in results.
	InterrogateReturnRanks *interface{} `json:"interrogate_return_ranks,omitempty"`

	// JpegQuality Quality for saved jpeg images
	JpegQuality *float32 `json:"jpeg_quality,omitempty"`

	// JsLivePreviewInModalLightbox Show Live preview in full page image viewer
	JsLivePreviewInModalLightbox *interface{} `json:"js_live_preview_in_modal_lightbox,omitempty"`

	// JsModalLightbox Full page image viewer: enable
	JsModalLightbox *bool `json:"js_modal_lightbox,omitempty"`

	// JsModalLightboxGamepad Full page image viewer: navigate with gamepad
	JsModalLightboxGamepad *interface{} `json:"js_modal_lightbox_gamepad,omitempty"`

	// JsModalLightboxGamepadRepeat Full page image viewer: gamepad repeat period
	JsModalLightboxGamepadRepeat *float32 `json:"js_modal_lightbox_gamepad_repeat,omitempty"`

	// JsModalLightboxInitiallyZoomed Full page image viewer: show images zoomed in by default
	JsModalLightboxInitiallyZoomed *bool `json:"js_modal_lightbox_initially_zoomed,omitempty"`

	// KSchedType Scheduler type
	KSchedType *string `json:"k_sched_type,omitempty"`

	// KeyeditDelimiters Word delimiters when editing the prompt with Ctrl+up/down
	KeyeditDelimiters *string `json:"keyedit_delimiters,omitempty"`

	// KeyeditDelimitersWhitespace Ctrl+up/down whitespace delimiters
	KeyeditDelimitersWhitespace *[]interface{} `json:"keyedit_delimiters_whitespace,omitempty"`

	// KeyeditMove Alt+left/right moves prompt elements
	KeyeditMove *bool `json:"keyedit_move,omitempty"`

	// KeyeditPrecisionAttention Precision for (attention:1.1) when editing the prompt with Ctrl+up/down
	KeyeditPrecisionAttention *float32 `json:"keyedit_precision_attention,omitempty"`

	// KeyeditPrecisionExtra Precision for <extra networks:0.9> when editing the prompt with Ctrl+up/down
	KeyeditPrecisionExtra *float32 `json:"keyedit_precision_extra,omitempty"`

	// ListHiddenFiles Load models/files in hidden directories
	ListHiddenFiles *bool `json:"list_hidden_files,omitempty"`

	// LivePreviewAllowLowvramFull Allow Full live preview method with lowvram/medvram
	LivePreviewAllowLowvramFull *interface{} `json:"live_preview_allow_lowvram_full,omitempty"`

	// LivePreviewContent Live preview subject
	LivePreviewContent *string `json:"live_preview_content,omitempty"`

	// LivePreviewFastInterrupt Return image with chosen live preview method on interrupt
	LivePreviewFastInterrupt *interface{} `json:"live_preview_fast_interrupt,omitempty"`

	// LivePreviewRefreshPeriod Progressbar and preview update period
	LivePreviewRefreshPeriod *float32 `json:"live_preview_refresh_period,omitempty"`

	// LivePreviewsEnable Show live previews of the created image
	LivePreviewsEnable *bool `json:"live_previews_enable,omitempty"`

	// LivePreviewsImageFormat Live preview file format
	LivePreviewsImageFormat *string `json:"live_previews_image_format,omitempty"`

	// Localization Localization
	Localization *string `json:"localization,omitempty"`

	// LoraAddHashesToInfotext Add Lora hashes to infotext
	LoraAddHashesToInfotext *bool `json:"lora_add_hashes_to_infotext,omitempty"`

	// LoraFunctional Lora/Networks: use old method that takes longer when you have multiple Loras active and produces same results as kohya-ss/sd-webui-additional-networks extension
	LoraFunctional *interface{} `json:"lora_functional,omitempty"`

	// LoraHideUnknownForVersions Hide networks of unknown versions for model versions
	LoraHideUnknownForVersions *interface{} `json:"lora_hide_unknown_for_versions,omitempty"`

	// LoraInMemoryLimit Number of Lora networks to keep cached in memory
	LoraInMemoryLimit *interface{} `json:"lora_in_memory_limit,omitempty"`

	// LoraPreferredName When adding to prompt, refer to Lora by
	LoraPreferredName *string `json:"lora_preferred_name,omitempty"`

	// LoraShowAll Always show all networks on the Lora page
	LoraShowAll *interface{} `json:"lora_show_all,omitempty"`

	// MemmonPollRate VRAM usage polls per second during generation.
	MemmonPollRate *float32 `json:"memmon_poll_rate,omitempty"`

	// MultipleTqdm Add a second progress bar to the console that shows progress for an entire job.
	MultipleTqdm *bool `json:"multiple_tqdm,omitempty"`

	// NRows Grid row count; use -1 for autodetect and 0 for it to be same as batch size
	NRows *float32 `json:"n_rows,omitempty"`

	// NoDpmppSdeBatchDeterminism Do not make DPM++ SDE deterministic across different batch sizes.
	NoDpmppSdeBatchDeterminism *interface{} `json:"no_dpmpp_sde_batch_determinism,omitempty"`

	// NotificationAudio Play notification sound after image generation
	NotificationAudio *bool `json:"notification_audio,omitempty"`

	// NotificationVolume Notification sound volume
	NotificationVolume *float32 `json:"notification_volume,omitempty"`

	// OutdirExtrasSamples Output directory for images from extras tab
	OutdirExtrasSamples *string `json:"outdir_extras_samples,omitempty"`

	// OutdirGrids Output directory for grids; if empty, defaults to two directories below
	OutdirGrids *interface{} `json:"outdir_grids,omitempty"`

	// OutdirImg2imgGrids Output directory for img2img grids
	OutdirImg2imgGrids *string `json:"outdir_img2img_grids,omitempty"`

	// OutdirImg2imgSamples Output directory for img2img images
	OutdirImg2imgSamples *string `json:"outdir_img2img_samples,omitempty"`

	// OutdirInitImages Directory for saving init images when using img2img
	OutdirInitImages *string `json:"outdir_init_images,omitempty"`

	// OutdirSamples Output directory for images; if empty, defaults to three directories below
	OutdirSamples *interface{} `json:"outdir_samples,omitempty"`

	// OutdirSave Directory for saving images using the Save button
	OutdirSave *string `json:"outdir_save,omitempty"`

	// OutdirTxt2imgGrids Output directory for txt2img grids
	OutdirTxt2imgGrids *string `json:"outdir_txt2img_grids,omitempty"`

	// OutdirTxt2imgSamples Output directory for txt2img images
	OutdirTxt2imgSamples *string `json:"outdir_txt2img_samples,omitempty"`

	// PadCondUncond Pad prompt/negative prompt to be same length
	PadCondUncond *interface{} `json:"pad_cond_uncond,omitempty"`

	// PersistentCondCache Persistent cond cache
	PersistentCondCache *bool `json:"persistent_cond_cache,omitempty"`

	// PinMemory Turn on pin_memory for DataLoader. Makes training slightly faster but can increase memory usage.
	PinMemory *interface{} `json:"pin_memory,omitempty"`

	// PostprocessingEnableInMainUi Enable postprocessing operations in txt2img and img2img tabs
	PostprocessingEnableInMainUi *interface{} `json:"postprocessing_enable_in_main_ui,omitempty"`

	// PostprocessingExistingCaptionAction Action for existing captions
	PostprocessingExistingCaptionAction *string `json:"postprocessing_existing_caption_action,omitempty"`

	// PostprocessingOperationOrder Postprocessing operation order
	PostprocessingOperationOrder *interface{} `json:"postprocessing_operation_order,omitempty"`

	// PrintHypernetExtra Print extra hypernetwork information to console.
	PrintHypernetExtra *interface{} `json:"print_hypernet_extra,omitempty"`

	// QuicksettingsList Quicksettings list
	QuicksettingsList *[]interface{} `json:"quicksettings_list,omitempty"`

	// RandnSource Random number generator source.
	RandnSource *string `json:"randn_source,omitempty"`

	// RealesrganEnabledModels Select which Real-ESRGAN models to show in the web UI.
	RealesrganEnabledModels *[]interface{} `json:"realesrgan_enabled_models,omitempty"`

	// RestoreConfigStateFile Config state file to restore from, under 'config-states/' folder
	RestoreConfigStateFile *interface{} `json:"restore_config_state_file,omitempty"`

	// ReturnGrid Show grid in gallery
	ReturnGrid *bool `json:"return_grid,omitempty"`

	// ReturnMask For inpainting, include the greyscale mask in results for web
	ReturnMask *interface{} `json:"return_mask,omitempty"`

	// ReturnMaskComposite For inpainting, include masked composite in results for web
	ReturnMaskComposite *interface{} `json:"return_mask_composite,omitempty"`

	// Rho rho
	Rho *interface{} `json:"rho,omitempty"`

	// SChurn sigma churn
	SChurn *interface{} `json:"s_churn,omitempty"`

	// SMinUncond Negative Guidance minimum sigma
	SMinUncond *interface{} `json:"s_min_uncond,omitempty"`

	// SNoise sigma noise
	SNoise *float32 `json:"s_noise,omitempty"`

	// STmax sigma tmax
	STmax *interface{} `json:"s_tmax,omitempty"`

	// STmin sigma tmin
	STmin *interface{} `json:"s_tmin,omitempty"`

	// SamplersInDropdown Use dropdown for sampler selection instead of radio group
	SamplersInDropdown *bool `json:"samplers_in_dropdown,omitempty"`

	// SamplesFilenamePattern Images filename pattern
	SamplesFilenamePattern *interface{} `json:"samples_filename_pattern,omitempty"`

	// SamplesFormat File format for images
	SamplesFormat *string `json:"samples_format,omitempty"`

	// SamplesLogStdout Always print all generation info to standard output
	SamplesLogStdout *interface{} `json:"samples_log_stdout,omitempty"`

	// SamplesSave Always save all generated images
	SamplesSave *bool `json:"samples_save,omitempty"`

	// SaveImagesAddNumber Add number to filename when saving
	SaveImagesAddNumber *bool `json:"save_images_add_number,omitempty"`

	// SaveImagesBeforeColorCorrection Save a copy of image before applying color correction to img2img results
	SaveImagesBeforeColorCorrection *interface{} `json:"save_images_before_color_correction,omitempty"`

	// SaveImagesBeforeFaceRestoration Save a copy of image before doing face restoration.
	SaveImagesBeforeFaceRestoration *interface{} `json:"save_images_before_face_restoration,omitempty"`

	// SaveImagesBeforeHighresFix Save a copy of image before applying highres fix.
	SaveImagesBeforeHighresFix *interface{} `json:"save_images_before_highres_fix,omitempty"`

	// SaveImagesReplaceAction Saving the image to an existing file
	SaveImagesReplaceAction *string `json:"save_images_replace_action,omitempty"`

	// SaveIncompleteImages Save incomplete images
	SaveIncompleteImages *interface{} `json:"save_incomplete_images,omitempty"`

	// SaveInitImg Save init images when using img2img
	SaveInitImg *interface{} `json:"save_init_img,omitempty"`

	// SaveMask For inpainting, save a copy of the greyscale mask
	SaveMask *interface{} `json:"save_mask,omitempty"`

	// SaveMaskComposite For inpainting, save a masked composite
	SaveMaskComposite *interface{} `json:"save_mask_composite,omitempty"`

	// SaveOptimizerState Saves Optimizer state as separate *.optim file. Training of embedding or HN can be resumed with the matching optim file.
	SaveOptimizerState *interface{} `json:"save_optimizer_state,omitempty"`

	// SaveSelectedOnly When using 'Save' button, only save a single selected image
	SaveSelectedOnly *bool `json:"save_selected_only,omitempty"`

	// SaveToDirs Save images to a subdirectory
	SaveToDirs *bool `json:"save_to_dirs,omitempty"`

	// SaveTrainingSettingsToTxt Save textual inversion and hypernet settings to a text file whenever training starts.
	SaveTrainingSettingsToTxt *bool `json:"save_training_settings_to_txt,omitempty"`

	// SaveTxt Create a text file with infotext next to every generated image
	SaveTxt *interface{} `json:"save_txt,omitempty"`

	// SdCheckpointCache Checkpoints to cache in RAM
	SdCheckpointCache *interface{} `json:"sd_checkpoint_cache,omitempty"`

	// SdCheckpointDropdownUseShort Checkpoint dropdown: use filenames without paths
	SdCheckpointDropdownUseShort *interface{} `json:"sd_checkpoint_dropdown_use_short,omitempty"`

	// SdCheckpointHash SHA256 hash of the current checkpoint
	SdCheckpointHash *interface{} `json:"sd_checkpoint_hash,omitempty"`

	// SdCheckpointsKeepInCpu Only keep one model on device
	SdCheckpointsKeepInCpu *bool `json:"sd_checkpoints_keep_in_cpu,omitempty"`

	// SdCheckpointsLimit Maximum number of checkpoints loaded at the same time
	SdCheckpointsLimit *float32 `json:"sd_checkpoints_limit,omitempty"`

	// SdHypernetwork Add hypernetwork to prompt
	SdHypernetwork *string `json:"sd_hypernetwork,omitempty"`

	// SdLora Add network to prompt
	SdLora *string `json:"sd_lora,omitempty"`

	// SdModelCheckpoint Stable Diffusion checkpoint
	SdModelCheckpoint *interface{} `json:"sd_model_checkpoint,omitempty"`

	// SdUnet SD Unet
	SdUnet *string `json:"sd_unet,omitempty"`

	// SdVae SD VAE
	SdVae *string `json:"sd_vae,omitempty"`

	// SdVaeCheckpointCache VAE Checkpoints to cache in RAM
	SdVaeCheckpointCache *interface{} `json:"sd_vae_checkpoint_cache,omitempty"`

	// SdVaeDecodeMethod VAE type for decode
	SdVaeDecodeMethod *string `json:"sd_vae_decode_method,omitempty"`

	// SdVaeEncodeMethod VAE type for encode
	SdVaeEncodeMethod *string `json:"sd_vae_encode_method,omitempty"`
	SdVaeExplanation  *string `json:"sd_vae_explanation,omitempty"`

	// SdVaeOverridesPerModelPreferences Selected VAE overrides per-model preferences
	SdVaeOverridesPerModelPreferences *bool `json:"sd_vae_overrides_per_model_preferences,omitempty"`

	// SdxlCropLeft crop left coordinate
	SdxlCropLeft *interface{} `json:"sdxl_crop_left,omitempty"`

	// SdxlCropTop crop top coordinate
	SdxlCropTop *interface{} `json:"sdxl_crop_top,omitempty"`

	// SdxlRefinerHighAestheticScore SDXL high aesthetic score
	SdxlRefinerHighAestheticScore *float32 `json:"sdxl_refiner_high_aesthetic_score,omitempty"`

	// SdxlRefinerLowAestheticScore SDXL low aesthetic score
	SdxlRefinerLowAestheticScore *float32 `json:"sdxl_refiner_low_aesthetic_score,omitempty"`

	// SendSeed Send seed when sending prompt or image to other interface
	SendSeed *bool `json:"send_seed,omitempty"`

	// SendSize Send size when sending prompt or image to another interface
	SendSize     *bool   `json:"send_size,omitempty"`
	SettingsInUi *string `json:"settings_in_ui,omitempty"`

	// SgmNoiseMultiplier SGM noise multiplier
	SgmNoiseMultiplier *interface{} `json:"sgm_noise_multiplier,omitempty"`

	// ShowGradioDeprecationWarnings Show gradio deprecation warnings in console.
	ShowGradioDeprecationWarnings *bool `json:"show_gradio_deprecation_warnings,omitempty"`

	// ShowProgressEveryNSteps Live preview display period
	ShowProgressEveryNSteps *float32 `json:"show_progress_every_n_steps,omitempty"`

	// ShowProgressGrid Show previews of all images generated in a batch as a grid
	ShowProgressGrid *bool `json:"show_progress_grid,omitempty"`

	// ShowProgressInTitle Show generation progress in window title.
	ShowProgressInTitle *bool `json:"show_progress_in_title,omitempty"`

	// ShowProgressType Live preview method
	ShowProgressType *string `json:"show_progress_type,omitempty"`

	// ShowProgressbar Show progressbar
	ShowProgressbar *bool `json:"show_progressbar,omitempty"`

	// ShowWarnings Show warnings in console.
	ShowWarnings *interface{} `json:"show_warnings,omitempty"`

	// SigmaMax sigma max
	SigmaMax *interface{} `json:"sigma_max,omitempty"`

	// SigmaMin sigma min
	SigmaMin *interface{} `json:"sigma_min,omitempty"`

	// TargetSideLength Width/height limit for the above option, in pixels
	TargetSideLength *float32 `json:"target_side_length,omitempty"`

	// TempDir Directory for temporary images; leave empty for default
	TempDir *interface{} `json:"temp_dir,omitempty"`

	// TextualInversionAddHashesToInfotext Add Textual Inversion hashes to infotext
	TextualInversionAddHashesToInfotext *bool `json:"textual_inversion_add_hashes_to_infotext,omitempty"`

	// TextualInversionPrintAtLoad Print a list of Textual Inversion embeddings when loading model
	TextualInversionPrintAtLoad *interface{} `json:"textual_inversion_print_at_load,omitempty"`

	// Tiling Tiling
	Tiling *interface{} `json:"tiling,omitempty"`

	// TokenMergingRatio Token merging ratio
	TokenMergingRatio *interface{} `json:"token_merging_ratio,omitempty"`

	// TokenMergingRatioHr Token merging ratio for high-res pass
	TokenMergingRatioHr *interface{} `json:"token_merging_ratio_hr,omitempty"`

	// TokenMergingRatioImg2img Token merging ratio for img2img
	TokenMergingRatioImg2img *interface{} `json:"token_merging_ratio_img2img,omitempty"`

	// TrainingEnableTensorboard Enable tensorboard logging.
	TrainingEnableTensorboard *interface{} `json:"training_enable_tensorboard,omitempty"`

	// TrainingImageRepeatsPerEpoch Number of repeats for a single input image per epoch; used only for displaying epoch number
	TrainingImageRepeatsPerEpoch *float32 `json:"training_image_repeats_per_epoch,omitempty"`

	// TrainingTensorboardFlushEvery How often, in seconds, to flush the pending tensorboard events and summaries to disk.
	TrainingTensorboardFlushEvery *float32 `json:"training_tensorboard_flush_every,omitempty"`

	// TrainingTensorboardSaveImages Save generated images within tensorboard.
	TrainingTensorboardSaveImages *interface{} `json:"training_tensorboard_save_images,omitempty"`

	// TrainingWriteCsvEvery Save an csv containing the loss to log directory every N steps, 0 to disable
	TrainingWriteCsvEvery *float32 `json:"training_write_csv_every,omitempty"`

	// TrainingXattentionOptimizations Use cross attention optimizations while training
	TrainingXattentionOptimizations *interface{} `json:"training_xattention_optimizations,omitempty"`

	// Txt2imgSettingsAccordion Settings in txt2img hidden under Accordion
	Txt2imgSettingsAccordion *interface{} `json:"txt2img_settings_accordion,omitempty"`

	// UiExtraNetworksTabReorder Extra networks tab order
	UiExtraNetworksTabReorder *interface{} `json:"ui_extra_networks_tab_reorder,omitempty"`

	// UiReorderList UI item order for txt2img/img2img tabs
	UiReorderList *interface{} `json:"ui_reorder_list,omitempty"`

	// UiTabOrder UI tab order
	UiTabOrder *interface{} `json:"ui_tab_order,omitempty"`

	// UniPcLowerOrderFinal UniPC lower order final
	UniPcLowerOrderFinal *bool `json:"uni_pc_lower_order_final,omitempty"`

	// UniPcOrder UniPC order
	UniPcOrder *float32 `json:"uni_pc_order,omitempty"`

	// UniPcSkipType UniPC skip type
	UniPcSkipType *string `json:"uni_pc_skip_type,omitempty"`

	// UniPcVariant UniPC variant
	UniPcVariant *string `json:"uni_pc_variant,omitempty"`

	// UnloadModelsWhenTraining Move VAE and CLIP to RAM when training if possible. Saves VRAM.
	UnloadModelsWhenTraining *interface{} `json:"unload_models_when_training,omitempty"`

	// UpcastAttn Upcast cross attention layer to float32
	UpcastAttn *interface{} `json:"upcast_attn,omitempty"`

	// UpscalerForImg2img Upscaler for img2img
	UpscalerForImg2img *interface{} `json:"upscaler_for_img2img,omitempty"`

	// UpscalingMaxImagesInCache Maximum number of images in upscaling cache
	UpscalingMaxImagesInCache *float32 `json:"upscaling_max_images_in_cache,omitempty"`

	// UseOldEmphasisImplementation Use old emphasis implementation. Can be useful to reproduce old seeds.
	UseOldEmphasisImplementation *interface{} `json:"use_old_emphasis_implementation,omitempty"`

	// UseOldHiresFixWidthHeight For hires fix, use width/height sliders to set final resolution rather than first pass (disables Upscale by, Resize width/height to).
	UseOldHiresFixWidthHeight *interface{} `json:"use_old_hires_fix_width_height,omitempty"`

	// UseOldKarrasSchedulerSigmas Use old karras scheduler sigmas (0.1 to 10).
	UseOldKarrasSchedulerSigmas *interface{} `json:"use_old_karras_scheduler_sigmas,omitempty"`

	// UseOldScheduling Use old prompt editing timelines.
	UseOldScheduling *interface{} `json:"use_old_scheduling,omitempty"`

	// UseOriginalNameBatch Use original name for output filename during batch process in extras tab
	UseOriginalNameBatch *bool `json:"use_original_name_batch,omitempty"`

	// UseSaveToDirsForUi When using "Save" button, save images to a subdirectory
	UseSaveToDirsForUi *interface{} `json:"use_save_to_dirs_for_ui,omitempty"`

	// UseUpscalerNameAsSuffix Use upscaler name as filename suffix in the extras tab
	UseUpscalerNameAsSuffix *interface{} `json:"use_upscaler_name_as_suffix,omitempty"`

	// WebpLossless Use lossless compression for webp images
	WebpLossless *interface{} `json:"webp_lossless,omitempty"`
}

// PNGInfoRequest defines model for PNGInfoRequest.
type PNGInfoRequest struct {
	// Image The base64 encoded PNG image
	Image string `json:"image"`
}

// PNGInfoResponse defines model for PNGInfoResponse.
type PNGInfoResponse struct {
	// Info A string with the parameters used to generate the image
	Info string `json:"info"`

	// Items A dictionary containing all the other fields the image had
	Items map[string]interface{} `json:"items"`

	// Parameters A dictionary with parsed generation info fields
	Parameters map[string]interface{} `json:"parameters"`
}

// PredictBody defines model for PredictBody.
type PredictBody struct {
	Batched     *bool                `json:"batched,omitempty"`
	Data        []interface{}        `json:"data"`
	EventData   *interface{}         `json:"event_data,omitempty"`
	EventId     *string              `json:"event_id,omitempty"`
	FnIndex     *int                 `json:"fn_index,omitempty"`
	Request     *PredictBody_Request `json:"request,omitempty"`
	SessionHash *string              `json:"session_hash,omitempty"`
}

// PredictBodyRequest0 defines model for .
type PredictBodyRequest0 = map[string]interface{}

// PredictBodyRequest1 defines model for .
type PredictBodyRequest1 = []map[string]interface{}

// PredictBody_Request defines model for PredictBody.Request.
type PredictBody_Request struct {
	union json.RawMessage
}

// ProgressRequest defines model for ProgressRequest.
type ProgressRequest struct {
	// IdLivePreview id of last received last preview image
	IdLivePreview *int `json:"id_live_preview,omitempty"`

	// IdTask id of the task to get progress for
	IdTask *string `json:"id_task,omitempty"`

	// LivePreview boolean flag indicating whether to include the live preview image
	LivePreview *bool `json:"live_preview,omitempty"`
}

// PromptStyleItem defines model for PromptStyleItem.
type PromptStyleItem struct {
	Name           string  `json:"name"`
	NegativePrompt *string `json:"negative_prompt,omitempty"`
	Prompt         *string `json:"prompt,omitempty"`
}

// QuicksettingsHint defines model for QuicksettingsHint.
type QuicksettingsHint struct {
	Label string `json:"label"`
	Name  string `json:"name"`
}

// RealesrganItem defines model for RealesrganItem.
type RealesrganItem struct {
	Name  string  `json:"name"`
	Path  *string `json:"path,omitempty"`
	Scale *int    `json:"scale,omitempty"`
}

// ResetBody defines model for ResetBody.
type ResetBody struct {
	FnIndex     int    `json:"fn_index"`
	SessionHash string `json:"session_hash"`
}

// SDModelItem defines model for SDModelItem.
type SDModelItem struct {
	Config    *string `json:"config,omitempty"`
	Filename  string  `json:"filename"`
	Hash      *string `json:"hash,omitempty"`
	ModelName string  `json:"model_name"`
	Sha256    *string `json:"sha256,omitempty"`
	Title     string  `json:"title"`
}

// SDVaeItem defines model for SDVaeItem.
type SDVaeItem struct {
	Filename  string `json:"filename"`
	ModelName string `json:"model_name"`
}

// SamplerItem defines model for SamplerItem.
type SamplerItem struct {
	Aliases []string          `json:"aliases"`
	Name    string            `json:"name"`
	Options map[string]string `json:"options"`
}

// ScriptArg defines model for ScriptArg.
type ScriptArg struct {
	// Choices Possible values for the argument
	Choices *[]string `json:"choices,omitempty"`

	// Label Name of the argument in UI
	Label *string `json:"label,omitempty"`

	// Maximum Maximum allowed value for the argumentin UI
	Maximum *interface{} `json:"maximum,omitempty"`

	// Minimum Minimum allowed value for the argumentin UI
	Minimum *interface{} `json:"minimum,omitempty"`

	// Step Step for changing value of the argumentin UI
	Step *interface{} `json:"step,omitempty"`

	// Value Default value of the argument
	Value *interface{} `json:"value,omitempty"`
}

// ScriptInfo defines model for ScriptInfo.
type ScriptInfo struct {
	// Args List of script's arguments
	Args []ScriptArg `json:"args"`

	// IsAlwayson Flag specifying whether this script is an alwayson script
	IsAlwayson *bool `json:"is_alwayson,omitempty"`

	// IsImg2img Flag specifying whether this script is an img2img script
	IsImg2img *bool `json:"is_img2img,omitempty"`

	// Name Script name
	Name *string `json:"name,omitempty"`
}

// ScriptsList defines model for ScriptsList.
type ScriptsList struct {
	// Img2img Titles of scripts (img2img)
	Img2img *[]interface{} `json:"img2img,omitempty"`

	// Txt2img Titles of scripts (txt2img)
	Txt2img *[]interface{} `json:"txt2img,omitempty"`
}

// StableDiffusionProcessingImg2Img defines model for StableDiffusionProcessingImg2Img.
type StableDiffusionProcessingImg2Img struct {
	AlwaysonScripts                   *map[string]interface{} `json:"alwayson_scripts,omitempty"`
	BatchSize                         *int                    `json:"batch_size,omitempty"`
	CfgScale                          *float32                `json:"cfg_scale,omitempty"`
	Comments                          *map[string]interface{} `json:"comments,omitempty"`
	DenoisingStrength                 *float32                `json:"denoising_strength,omitempty"`
	DisableExtraNetworks              *bool                   `json:"disable_extra_networks,omitempty"`
	DoNotSaveGrid                     *bool                   `json:"do_not_save_grid,omitempty"`
	DoNotSaveSamples                  *bool                   `json:"do_not_save_samples,omitempty"`
	Eta                               *float32                `json:"eta,omitempty"`
	Height                            *int                    `json:"height,omitempty"`
	ImageCfgScale                     *float32                `json:"image_cfg_scale,omitempty"`
	IncludeInitImages                 *bool                   `json:"include_init_images,omitempty"`
	InitImages                        *[]interface{}          `json:"init_images,omitempty"`
	InitialNoiseMultiplier            *float32                `json:"initial_noise_multiplier,omitempty"`
	InpaintFullRes                    *bool                   `json:"inpaint_full_res,omitempty"`
	InpaintFullResPadding             *int                    `json:"inpaint_full_res_padding,omitempty"`
	InpaintingFill                    *int                    `json:"inpainting_fill,omitempty"`
	InpaintingMaskInvert              *int                    `json:"inpainting_mask_invert,omitempty"`
	LatentMask                        *string                 `json:"latent_mask,omitempty"`
	Mask                              *string                 `json:"mask,omitempty"`
	MaskBlur                          *int                    `json:"mask_blur,omitempty"`
	MaskBlurX                         *int                    `json:"mask_blur_x,omitempty"`
	MaskBlurY                         *int                    `json:"mask_blur_y,omitempty"`
	NIter                             *int                    `json:"n_iter,omitempty"`
	NegativePrompt                    *string                 `json:"negative_prompt,omitempty"`
	OverrideSettings                  *map[string]interface{} `json:"override_settings,omitempty"`
	OverrideSettingsRestoreAfterwards *bool                   `json:"override_settings_restore_afterwards,omitempty"`
	Prompt                            *string                 `json:"prompt,omitempty"`
	RefinerCheckpoint                 *string                 `json:"refiner_checkpoint,omitempty"`
	RefinerSwitchAt                   *float32                `json:"refiner_switch_at,omitempty"`
	ResizeMode                        *int                    `json:"resize_mode,omitempty"`
	RestoreFaces                      *bool                   `json:"restore_faces,omitempty"`
	SChurn                            *float32                `json:"s_churn,omitempty"`
	SMinUncond                        *float32                `json:"s_min_uncond,omitempty"`
	SNoise                            *float32                `json:"s_noise,omitempty"`
	STmax                             *float32                `json:"s_tmax,omitempty"`
	STmin                             *float32                `json:"s_tmin,omitempty"`
	SamplerIndex                      *string                 `json:"sampler_index,omitempty"`
	SamplerName                       *string                 `json:"sampler_name,omitempty"`
	SaveImages                        *bool                   `json:"save_images,omitempty"`
	ScriptArgs                        *[]interface{}          `json:"script_args,omitempty"`
	ScriptName                        *string                 `json:"script_name,omitempty"`
	Seed                              *int                    `json:"seed,omitempty"`
	SeedResizeFromH                   *int                    `json:"seed_resize_from_h,omitempty"`
	SeedResizeFromW                   *int                    `json:"seed_resize_from_w,omitempty"`
	SendImages                        *bool                   `json:"send_images,omitempty"`
	Steps                             *int                    `json:"steps,omitempty"`
	Styles                            *[]string               `json:"styles,omitempty"`
	Subseed                           *int                    `json:"subseed,omitempty"`
	SubseedStrength                   *float32                `json:"subseed_strength,omitempty"`
	Tiling                            *bool                   `json:"tiling,omitempty"`
	Width                             *int                    `json:"width,omitempty"`
}

// StableDiffusionProcessingTxt2Img defines model for StableDiffusionProcessingTxt2Img.
type StableDiffusionProcessingTxt2Img struct {
	AlwaysonScripts                   *map[string]interface{} `json:"alwayson_scripts,omitempty"`
	BatchSize                         *int                    `json:"batch_size,omitempty"`
	CfgScale                          *float32                `json:"cfg_scale,omitempty"`
	Comments                          *map[string]interface{} `json:"comments,omitempty"`
	DenoisingStrength                 *float32                `json:"denoising_strength,omitempty"`
	DisableExtraNetworks              *bool                   `json:"disable_extra_networks,omitempty"`
	DoNotSaveGrid                     *bool                   `json:"do_not_save_grid,omitempty"`
	DoNotSaveSamples                  *bool                   `json:"do_not_save_samples,omitempty"`
	EnableHr                          *bool                   `json:"enable_hr,omitempty"`
	Eta                               *float32                `json:"eta,omitempty"`
	FirstphaseHeight                  *int                    `json:"firstphase_height,omitempty"`
	FirstphaseWidth                   *int                    `json:"firstphase_width,omitempty"`
	Height                            *int                    `json:"height,omitempty"`
	HrCheckpointName                  *string                 `json:"hr_checkpoint_name,omitempty"`
	HrNegativePrompt                  *string                 `json:"hr_negative_prompt,omitempty"`
	HrPrompt                          *string                 `json:"hr_prompt,omitempty"`
	HrResizeX                         *int                    `json:"hr_resize_x,omitempty"`
	HrResizeY                         *int                    `json:"hr_resize_y,omitempty"`
	HrSamplerName                     *string                 `json:"hr_sampler_name,omitempty"`
	HrScale                           *float32                `json:"hr_scale,omitempty"`
	HrSecondPassSteps                 *int                    `json:"hr_second_pass_steps,omitempty"`
	HrUpscaler                        *string                 `json:"hr_upscaler,omitempty"`
	NIter                             *int                    `json:"n_iter,omitempty"`
	NegativePrompt                    *string                 `json:"negative_prompt,omitempty"`
	OverrideSettings                  *map[string]interface{} `json:"override_settings,omitempty"`
	OverrideSettingsRestoreAfterwards *bool                   `json:"override_settings_restore_afterwards,omitempty"`
	Prompt                            *string                 `json:"prompt,omitempty"`
	RefinerCheckpoint                 *string                 `json:"refiner_checkpoint,omitempty"`
	RefinerSwitchAt                   *float32                `json:"refiner_switch_at,omitempty"`
	RestoreFaces                      *bool                   `json:"restore_faces,omitempty"`
	SChurn                            *float32                `json:"s_churn,omitempty"`
	SMinUncond                        *float32                `json:"s_min_uncond,omitempty"`
	SNoise                            *float32                `json:"s_noise,omitempty"`
	STmax                             *float32                `json:"s_tmax,omitempty"`
	STmin                             *float32                `json:"s_tmin,omitempty"`
	SamplerIndex                      *string                 `json:"sampler_index,omitempty"`
	SamplerName                       *string                 `json:"sampler_name,omitempty"`
	SaveImages                        *bool                   `json:"save_images,omitempty"`
	ScriptArgs                        *[]interface{}          `json:"script_args,omitempty"`
	ScriptName                        *string                 `json:"script_name,omitempty"`
	Seed                              *int                    `json:"seed,omitempty"`
	SeedResizeFromH                   *int                    `json:"seed_resize_from_h,omitempty"`
	SeedResizeFromW                   *int                    `json:"seed_resize_from_w,omitempty"`
	SendImages                        *bool                   `json:"send_images,omitempty"`
	Steps                             *int                    `json:"steps,omitempty"`
	Styles                            *[]string               `json:"styles,omitempty"`
	Subseed                           *int                    `json:"subseed,omitempty"`
	SubseedStrength                   *float32                `json:"subseed_strength,omitempty"`
	Tiling                            *bool                   `json:"tiling,omitempty"`
	Width                             *int                    `json:"width,omitempty"`
}

// TextToImageResponse defines model for TextToImageResponse.
type TextToImageResponse struct {
	// Images The generated image in base64 format.
	Images     *[]string              `json:"images,omitempty"`
	Info       string                 `json:"info"`
	Parameters map[string]interface{} `json:"parameters"`
}

// TrainResponse defines model for TrainResponse.
type TrainResponse struct {
	// Info Response string from train embedding or hypernetwork task.
	Info string `json:"info"`
}

// UpscalerItem defines model for UpscalerItem.
type UpscalerItem struct {
	ModelName *string  `json:"model_name,omitempty"`
	ModelPath *string  `json:"model_path,omitempty"`
	ModelUrl  *string  `json:"model_url,omitempty"`
	Name      string   `json:"name"`
	Scale     *float32 `json:"scale,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// ModulesApiModelsProgressResponse defines model for modules__api__models__ProgressResponse.
type ModulesApiModelsProgressResponse struct {
	// CurrentImage The current image in base64 format. opts.show_progress_every_n_steps is required for this to work.
	CurrentImage *string `json:"current_image,omitempty"`
	EtaRelative  float32 `json:"eta_relative"`

	// Progress The progress with a range of 0 to 1
	Progress float32 `json:"progress"`

	// State The current state snapshot
	State map[string]interface{} `json:"state"`

	// Textinfo Info text used by WebUI.
	Textinfo *string `json:"textinfo,omitempty"`
}

// ModulesProgressProgressResponse defines model for modules__progress__ProgressResponse.
type ModulesProgressProgressResponse struct {
	Active    bool     `json:"active"`
	Completed bool     `json:"completed"`
	Eta       *float32 `json:"eta,omitempty"`

	// IdLivePreview Send this together with next request to prevent receiving same image
	IdLivePreview *int `json:"id_live_preview,omitempty"`

	// LivePreview Current live preview; a data: uri
	LivePreview *string `json:"live_preview,omitempty"`

	// Progress The progress with a range of 0 to 1
	Progress *float32 `json:"progress,omitempty"`
	Queued   bool     `json:"queued"`

	// Textinfo Info text used by WebUI.
	Textinfo *string `json:"textinfo,omitempty"`
}

// ApiInfoInfoGetParams defines parameters for ApiInfoInfoGet.
type ApiInfoInfoGetParams struct {
	Serialize *bool `form:"serialize,omitempty" json:"serialize,omitempty"`
}

// DownloadSysinfoInternalSysinfoGetParams defines parameters for DownloadSysinfoInternalSysinfoGet.
type DownloadSysinfoInternalSysinfoGetParams struct {
	Attachment *interface{} `form:"attachment,omitempty" json:"attachment,omitempty"`
}

// GetSingleCardSdExtraNetworksGetSingleCardGetParams defines parameters for GetSingleCardSdExtraNetworksGetSingleCardGet.
type GetSingleCardSdExtraNetworksGetSingleCardGetParams struct {
	Page    *string `form:"page,omitempty" json:"page,omitempty"`
	Tabname *string `form:"tabname,omitempty" json:"tabname,omitempty"`
	Name    *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetMetadataSdExtraNetworksMetadataGetParams defines parameters for GetMetadataSdExtraNetworksMetadataGet.
type GetMetadataSdExtraNetworksMetadataGetParams struct {
	Page *string `form:"page,omitempty" json:"page,omitempty"`
	Item *string `form:"item,omitempty" json:"item,omitempty"`
}

// FetchFileSdExtraNetworksThumbGetParams defines parameters for FetchFileSdExtraNetworksThumbGet.
type FetchFileSdExtraNetworksThumbGetParams struct {
	Filename *string `form:"filename,omitempty" json:"filename,omitempty"`
}

// CreateEmbeddingSdapiV1CreateEmbeddingPostJSONBody defines parameters for CreateEmbeddingSdapiV1CreateEmbeddingPost.
type CreateEmbeddingSdapiV1CreateEmbeddingPostJSONBody = map[string]interface{}

// CreateHypernetworkSdapiV1CreateHypernetworkPostJSONBody defines parameters for CreateHypernetworkSdapiV1CreateHypernetworkPost.
type CreateHypernetworkSdapiV1CreateHypernetworkPostJSONBody = map[string]interface{}

// SetConfigSdapiV1OptionsPostJSONBody defines parameters for SetConfigSdapiV1OptionsPost.
type SetConfigSdapiV1OptionsPostJSONBody = map[string]interface{}

// ProgressapiSdapiV1ProgressGetParams defines parameters for ProgressapiSdapiV1ProgressGet.
type ProgressapiSdapiV1ProgressGetParams struct {
	SkipCurrentImage *bool `form:"skip_current_image,omitempty" json:"skip_current_image,omitempty"`
}

// TrainEmbeddingSdapiV1TrainEmbeddingPostJSONBody defines parameters for TrainEmbeddingSdapiV1TrainEmbeddingPost.
type TrainEmbeddingSdapiV1TrainEmbeddingPostJSONBody = map[string]interface{}

// TrainHypernetworkSdapiV1TrainHypernetworkPostJSONBody defines parameters for TrainHypernetworkSdapiV1TrainHypernetworkPost.
type TrainHypernetworkSdapiV1TrainHypernetworkPostJSONBody = map[string]interface{}

// PredictApiApiNamePostJSONRequestBody defines body for PredictApiApiNamePost for application/json ContentType.
type PredictApiApiNamePostJSONRequestBody = PredictBody

// ProgressapiInternalProgressPostJSONRequestBody defines body for ProgressapiInternalProgressPost for application/json ContentType.
type ProgressapiInternalProgressPostJSONRequestBody = ProgressRequest

// LoginLoginPostFormdataRequestBody defines body for LoginLoginPost for application/x-www-form-urlencoded ContentType.
type LoginLoginPostFormdataRequestBody = BodyLoginLoginPost1

// ResetIteratorResetPostJSONRequestBody defines body for ResetIteratorResetPost for application/json ContentType.
type ResetIteratorResetPostJSONRequestBody = ResetBody

// PredictRunApiNamePostJSONRequestBody defines body for PredictRunApiNamePost for application/json ContentType.
type PredictRunApiNamePostJSONRequestBody = PredictBody

// CreateEmbeddingSdapiV1CreateEmbeddingPostJSONRequestBody defines body for CreateEmbeddingSdapiV1CreateEmbeddingPost for application/json ContentType.
type CreateEmbeddingSdapiV1CreateEmbeddingPostJSONRequestBody = CreateEmbeddingSdapiV1CreateEmbeddingPostJSONBody

// CreateHypernetworkSdapiV1CreateHypernetworkPostJSONRequestBody defines body for CreateHypernetworkSdapiV1CreateHypernetworkPost for application/json ContentType.
type CreateHypernetworkSdapiV1CreateHypernetworkPostJSONRequestBody = CreateHypernetworkSdapiV1CreateHypernetworkPostJSONBody

// ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostJSONRequestBody defines body for ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost for application/json ContentType.
type ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostJSONRequestBody = ExtrasBatchImagesRequest

// ExtrasSingleImageApiSdapiV1ExtraSingleImagePostJSONRequestBody defines body for ExtrasSingleImageApiSdapiV1ExtraSingleImagePost for application/json ContentType.
type ExtrasSingleImageApiSdapiV1ExtraSingleImagePostJSONRequestBody = ExtrasSingleImageRequest

// Img2imgapiSdapiV1Img2imgPostJSONRequestBody defines body for Img2imgapiSdapiV1Img2imgPost for application/json ContentType.
type Img2imgapiSdapiV1Img2imgPostJSONRequestBody = StableDiffusionProcessingImg2Img

// InterrogateapiSdapiV1InterrogatePostJSONRequestBody defines body for InterrogateapiSdapiV1InterrogatePost for application/json ContentType.
type InterrogateapiSdapiV1InterrogatePostJSONRequestBody = InterrogateRequest

// SetConfigSdapiV1OptionsPostJSONRequestBody defines body for SetConfigSdapiV1OptionsPost for application/json ContentType.
type SetConfigSdapiV1OptionsPostJSONRequestBody = SetConfigSdapiV1OptionsPostJSONBody

// PnginfoapiSdapiV1PngInfoPostJSONRequestBody defines body for PnginfoapiSdapiV1PngInfoPost for application/json ContentType.
type PnginfoapiSdapiV1PngInfoPostJSONRequestBody = PNGInfoRequest

// TrainEmbeddingSdapiV1TrainEmbeddingPostJSONRequestBody defines body for TrainEmbeddingSdapiV1TrainEmbeddingPost for application/json ContentType.
type TrainEmbeddingSdapiV1TrainEmbeddingPostJSONRequestBody = TrainEmbeddingSdapiV1TrainEmbeddingPostJSONBody

// TrainHypernetworkSdapiV1TrainHypernetworkPostJSONRequestBody defines body for TrainHypernetworkSdapiV1TrainHypernetworkPost for application/json ContentType.
type TrainHypernetworkSdapiV1TrainHypernetworkPostJSONRequestBody = TrainHypernetworkSdapiV1TrainHypernetworkPostJSONBody

// Text2imgapiSdapiV1Txt2imgPostJSONRequestBody defines body for Text2imgapiSdapiV1Txt2imgPost for application/json ContentType.
type Text2imgapiSdapiV1Txt2imgPostJSONRequestBody = StableDiffusionProcessingTxt2Img

// UploadFileUploadPostMultipartRequestBody defines body for UploadFileUploadPost for multipart/form-data ContentType.
type UploadFileUploadPostMultipartRequestBody = BodyUploadFileUploadPost

// AsPredictBodyRequest0 returns the union data inside the PredictBody_Request as a PredictBodyRequest0
func (t PredictBody_Request) AsPredictBodyRequest0() (PredictBodyRequest0, error) {
	var body PredictBodyRequest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPredictBodyRequest0 overwrites any union data inside the PredictBody_Request as the provided PredictBodyRequest0
func (t *PredictBody_Request) FromPredictBodyRequest0(v PredictBodyRequest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePredictBodyRequest0 performs a merge with any union data inside the PredictBody_Request, using the provided PredictBodyRequest0
func (t *PredictBody_Request) MergePredictBodyRequest0(v PredictBodyRequest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPredictBodyRequest1 returns the union data inside the PredictBody_Request as a PredictBodyRequest1
func (t PredictBody_Request) AsPredictBodyRequest1() (PredictBodyRequest1, error) {
	var body PredictBodyRequest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPredictBodyRequest1 overwrites any union data inside the PredictBody_Request as the provided PredictBodyRequest1
func (t *PredictBody_Request) FromPredictBodyRequest1(v PredictBodyRequest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePredictBodyRequest1 performs a merge with any union data inside the PredictBody_Request, using the provided PredictBodyRequest1
func (t *PredictBody_Request) MergePredictBodyRequest1(v PredictBodyRequest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PredictBody_Request) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PredictBody_Request) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// MainGet request
	MainGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MainHead request
	MainHead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PredictApiApiNamePostWithBody request with any body
	PredictApiApiNamePostWithBody(ctx context.Context, apiName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PredictApiApiNamePost(ctx context.Context, apiName string, body PredictApiApiNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppIdAppIdGet request
	AppIdAppIdGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildResourceAssetsPathGet request
	BuildResourceAssetsPathGet(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigConfigGet request
	GetConfigConfigGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FaviconFaviconIcoGet request
	FaviconFaviconIcoGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FileDeprecatedFilePathGet request
	FileDeprecatedFilePathGet(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FileFilePathOrUrlGet request
	FileFilePathOrUrlGet(ctx context.Context, pathOrUrl string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FileFilePathOrUrlHead request
	FileFilePathOrUrlHead(ctx context.Context, pathOrUrl string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiInfoInfoGet request
	ApiInfoInfoGet(ctx context.Context, params *ApiInfoInfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LambdaInternalPingGet request
	LambdaInternalPingGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LambdaInternalProfileStartupGet request
	LambdaInternalProfileStartupGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProgressapiInternalProgressPostWithBody request with any body
	ProgressapiInternalProgressPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProgressapiInternalProgressPost(ctx context.Context, body ProgressapiInternalProgressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuicksettingsHintInternalQuicksettingsHintGet request
	QuicksettingsHintInternalQuicksettingsHintGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadSysinfoInternalSysinfoGet request
	DownloadSysinfoInternalSysinfoGet(ctx context.Context, params *DownloadSysinfoInternalSysinfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LambdaInternalSysinfoDownloadGet request
	LambdaInternalSysinfoDownloadGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginLoginPostWithBody request with any body
	LoginLoginPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginLoginPostWithFormdataBody(ctx context.Context, body LoginLoginPostFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginCheckLoginCheckGet request
	LoginCheckLoginCheckGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReverseProxyProxyUrlPathGet request
	ReverseProxyProxyUrlPathGet(ctx context.Context, urlPath string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReverseProxyProxyUrlPathHead request
	ReverseProxyProxyUrlPathHead(ctx context.Context, urlPath string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQueueStatusQueueStatusGet request
	GetQueueStatusQueueStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetIteratorResetPostWithBody request with any body
	ResetIteratorResetPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetIteratorResetPost(ctx context.Context, body ResetIteratorResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RobotsTxtRobotsTxtGet request
	RobotsTxtRobotsTxtGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PredictRunApiNamePostWithBody request with any body
	PredictRunApiNamePostWithBody(ctx context.Context, apiName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PredictRunApiNamePost(ctx context.Context, apiName string, body PredictRunApiNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSingleCardSdExtraNetworksGetSingleCardGet request
	GetSingleCardSdExtraNetworksGetSingleCardGet(ctx context.Context, params *GetSingleCardSdExtraNetworksGetSingleCardGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetadataSdExtraNetworksMetadataGet request
	GetMetadataSdExtraNetworksMetadataGet(ctx context.Context, params *GetMetadataSdExtraNetworksMetadataGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchFileSdExtraNetworksThumbGet request
	FetchFileSdExtraNetworksThumbGet(ctx context.Context, params *FetchFileSdExtraNetworksThumbGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCmdFlagsSdapiV1CmdFlagsGet request
	GetCmdFlagsSdapiV1CmdFlagsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEmbeddingSdapiV1CreateEmbeddingPostWithBody request with any body
	CreateEmbeddingSdapiV1CreateEmbeddingPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEmbeddingSdapiV1CreateEmbeddingPost(ctx context.Context, body CreateEmbeddingSdapiV1CreateEmbeddingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHypernetworkSdapiV1CreateHypernetworkPostWithBody request with any body
	CreateHypernetworkSdapiV1CreateHypernetworkPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHypernetworkSdapiV1CreateHypernetworkPost(ctx context.Context, body CreateHypernetworkSdapiV1CreateHypernetworkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbeddingsSdapiV1EmbeddingsGet request
	GetEmbeddingsSdapiV1EmbeddingsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExtensionsListSdapiV1ExtensionsGet request
	GetExtensionsListSdapiV1ExtensionsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithBody request with any body
	ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost(ctx context.Context, body ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithBody request with any body
	ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtrasSingleImageApiSdapiV1ExtraSingleImagePost(ctx context.Context, body ExtrasSingleImageApiSdapiV1ExtraSingleImagePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFaceRestorersSdapiV1FaceRestorersGet request
	GetFaceRestorersSdapiV1FaceRestorersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHypernetworksSdapiV1HypernetworksGet request
	GetHypernetworksSdapiV1HypernetworksGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Img2imgapiSdapiV1Img2imgPostWithBody request with any body
	Img2imgapiSdapiV1Img2imgPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Img2imgapiSdapiV1Img2imgPost(ctx context.Context, body Img2imgapiSdapiV1Img2imgPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InterrogateapiSdapiV1InterrogatePostWithBody request with any body
	InterrogateapiSdapiV1InterrogatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InterrogateapiSdapiV1InterrogatePost(ctx context.Context, body InterrogateapiSdapiV1InterrogatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InterruptapiSdapiV1InterruptPost request
	InterruptapiSdapiV1InterruptPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet request
	GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLorasSdapiV1LorasGet request
	GetLorasSdapiV1LorasGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemorySdapiV1MemoryGet request
	GetMemorySdapiV1MemoryGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigSdapiV1OptionsGet request
	GetConfigSdapiV1OptionsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetConfigSdapiV1OptionsPostWithBody request with any body
	SetConfigSdapiV1OptionsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetConfigSdapiV1OptionsPost(ctx context.Context, body SetConfigSdapiV1OptionsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PnginfoapiSdapiV1PngInfoPostWithBody request with any body
	PnginfoapiSdapiV1PngInfoPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PnginfoapiSdapiV1PngInfoPost(ctx context.Context, body PnginfoapiSdapiV1PngInfoPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProgressapiSdapiV1ProgressGet request
	ProgressapiSdapiV1ProgressGet(ctx context.Context, params *ProgressapiSdapiV1ProgressGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromptStylesSdapiV1PromptStylesGet request
	GetPromptStylesSdapiV1PromptStylesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealesrganModelsSdapiV1RealesrganModelsGet request
	GetRealesrganModelsSdapiV1RealesrganModelsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshCheckpointsSdapiV1RefreshCheckpointsPost request
	RefreshCheckpointsSdapiV1RefreshCheckpointsPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshLorasSdapiV1RefreshLorasPost request
	RefreshLorasSdapiV1RefreshLorasPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshVaeSdapiV1RefreshVaePost request
	RefreshVaeSdapiV1RefreshVaePost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReloadapiSdapiV1ReloadCheckpointPost request
	ReloadapiSdapiV1ReloadCheckpointPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSamplersSdapiV1SamplersGet request
	GetSamplersSdapiV1SamplersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScriptInfoSdapiV1ScriptInfoGet request
	GetScriptInfoSdapiV1ScriptInfoGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScriptsListSdapiV1ScriptsGet request
	GetScriptsListSdapiV1ScriptsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSdModelsSdapiV1SdModelsGet request
	GetSdModelsSdapiV1SdModelsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSdVaesSdapiV1SdVaeGet request
	GetSdVaesSdapiV1SdVaeGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SkipSdapiV1SkipPost request
	SkipSdapiV1SkipPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainEmbeddingSdapiV1TrainEmbeddingPostWithBody request with any body
	TrainEmbeddingSdapiV1TrainEmbeddingPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TrainEmbeddingSdapiV1TrainEmbeddingPost(ctx context.Context, body TrainEmbeddingSdapiV1TrainEmbeddingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainHypernetworkSdapiV1TrainHypernetworkPostWithBody request with any body
	TrainHypernetworkSdapiV1TrainHypernetworkPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TrainHypernetworkSdapiV1TrainHypernetworkPost(ctx context.Context, body TrainHypernetworkSdapiV1TrainHypernetworkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Text2imgapiSdapiV1Txt2imgPostWithBody request with any body
	Text2imgapiSdapiV1Txt2imgPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Text2imgapiSdapiV1Txt2imgPost(ctx context.Context, body Text2imgapiSdapiV1Txt2imgPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnloadapiSdapiV1UnloadCheckpointPost request
	UnloadapiSdapiV1UnloadCheckpointPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpscalersSdapiV1UpscalersGet request
	GetUpscalersSdapiV1UpscalersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartupEventsStartupEventsGet request
	StartupEventsStartupEventsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StaticResourceStaticPathGet request
	StaticResourceStaticPathGet(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StreamStreamSessionHashRunComponentIdGet request
	StreamStreamSessionHashRunComponentIdGet(ctx context.Context, sessionHash string, run int, componentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThemeCssThemeCssGet request
	ThemeCssThemeCssGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokenTokenGet request
	GetTokenTokenGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadFileUploadPostWithBody request with any body
	UploadFileUploadPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrentUserUserGet request
	GetCurrentUserUserGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) MainGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMainGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MainHead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMainHeadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PredictApiApiNamePostWithBody(ctx context.Context, apiName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPredictApiApiNamePostRequestWithBody(c.Server, apiName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PredictApiApiNamePost(ctx context.Context, apiName string, body PredictApiApiNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPredictApiApiNamePostRequest(c.Server, apiName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppIdAppIdGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppIdAppIdGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildResourceAssetsPathGet(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildResourceAssetsPathGetRequest(c.Server, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigConfigGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigConfigGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FaviconFaviconIcoGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFaviconFaviconIcoGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FileDeprecatedFilePathGet(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFileDeprecatedFilePathGetRequest(c.Server, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FileFilePathOrUrlGet(ctx context.Context, pathOrUrl string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFileFilePathOrUrlGetRequest(c.Server, pathOrUrl)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FileFilePathOrUrlHead(ctx context.Context, pathOrUrl string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFileFilePathOrUrlHeadRequest(c.Server, pathOrUrl)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiInfoInfoGet(ctx context.Context, params *ApiInfoInfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiInfoInfoGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LambdaInternalPingGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLambdaInternalPingGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LambdaInternalProfileStartupGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLambdaInternalProfileStartupGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressapiInternalProgressPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressapiInternalProgressPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressapiInternalProgressPost(ctx context.Context, body ProgressapiInternalProgressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressapiInternalProgressPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuicksettingsHintInternalQuicksettingsHintGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuicksettingsHintInternalQuicksettingsHintGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadSysinfoInternalSysinfoGet(ctx context.Context, params *DownloadSysinfoInternalSysinfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadSysinfoInternalSysinfoGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LambdaInternalSysinfoDownloadGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLambdaInternalSysinfoDownloadGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginLoginPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginLoginPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginLoginPostWithFormdataBody(ctx context.Context, body LoginLoginPostFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginLoginPostRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginCheckLoginCheckGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginCheckLoginCheckGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReverseProxyProxyUrlPathGet(ctx context.Context, urlPath string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReverseProxyProxyUrlPathGetRequest(c.Server, urlPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReverseProxyProxyUrlPathHead(ctx context.Context, urlPath string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReverseProxyProxyUrlPathHeadRequest(c.Server, urlPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQueueStatusQueueStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQueueStatusQueueStatusGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetIteratorResetPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetIteratorResetPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetIteratorResetPost(ctx context.Context, body ResetIteratorResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetIteratorResetPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RobotsTxtRobotsTxtGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRobotsTxtRobotsTxtGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PredictRunApiNamePostWithBody(ctx context.Context, apiName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPredictRunApiNamePostRequestWithBody(c.Server, apiName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PredictRunApiNamePost(ctx context.Context, apiName string, body PredictRunApiNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPredictRunApiNamePostRequest(c.Server, apiName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSingleCardSdExtraNetworksGetSingleCardGet(ctx context.Context, params *GetSingleCardSdExtraNetworksGetSingleCardGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSingleCardSdExtraNetworksGetSingleCardGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetadataSdExtraNetworksMetadataGet(ctx context.Context, params *GetMetadataSdExtraNetworksMetadataGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetadataSdExtraNetworksMetadataGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchFileSdExtraNetworksThumbGet(ctx context.Context, params *FetchFileSdExtraNetworksThumbGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchFileSdExtraNetworksThumbGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCmdFlagsSdapiV1CmdFlagsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCmdFlagsSdapiV1CmdFlagsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEmbeddingSdapiV1CreateEmbeddingPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEmbeddingSdapiV1CreateEmbeddingPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEmbeddingSdapiV1CreateEmbeddingPost(ctx context.Context, body CreateEmbeddingSdapiV1CreateEmbeddingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEmbeddingSdapiV1CreateEmbeddingPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHypernetworkSdapiV1CreateHypernetworkPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHypernetworkSdapiV1CreateHypernetworkPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHypernetworkSdapiV1CreateHypernetworkPost(ctx context.Context, body CreateHypernetworkSdapiV1CreateHypernetworkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHypernetworkSdapiV1CreateHypernetworkPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbeddingsSdapiV1EmbeddingsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbeddingsSdapiV1EmbeddingsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExtensionsListSdapiV1ExtensionsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExtensionsListSdapiV1ExtensionsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost(ctx context.Context, body ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtrasSingleImageApiSdapiV1ExtraSingleImagePost(ctx context.Context, body ExtrasSingleImageApiSdapiV1ExtraSingleImagePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFaceRestorersSdapiV1FaceRestorersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFaceRestorersSdapiV1FaceRestorersGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHypernetworksSdapiV1HypernetworksGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHypernetworksSdapiV1HypernetworksGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Img2imgapiSdapiV1Img2imgPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImg2imgapiSdapiV1Img2imgPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Img2imgapiSdapiV1Img2imgPost(ctx context.Context, body Img2imgapiSdapiV1Img2imgPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImg2imgapiSdapiV1Img2imgPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InterrogateapiSdapiV1InterrogatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInterrogateapiSdapiV1InterrogatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InterrogateapiSdapiV1InterrogatePost(ctx context.Context, body InterrogateapiSdapiV1InterrogatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInterrogateapiSdapiV1InterrogatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InterruptapiSdapiV1InterruptPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInterruptapiSdapiV1InterruptPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatentUpscaleModesSdapiV1LatentUpscaleModesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLorasSdapiV1LorasGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLorasSdapiV1LorasGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemorySdapiV1MemoryGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemorySdapiV1MemoryGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigSdapiV1OptionsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigSdapiV1OptionsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetConfigSdapiV1OptionsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetConfigSdapiV1OptionsPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetConfigSdapiV1OptionsPost(ctx context.Context, body SetConfigSdapiV1OptionsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetConfigSdapiV1OptionsPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PnginfoapiSdapiV1PngInfoPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPnginfoapiSdapiV1PngInfoPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PnginfoapiSdapiV1PngInfoPost(ctx context.Context, body PnginfoapiSdapiV1PngInfoPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPnginfoapiSdapiV1PngInfoPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProgressapiSdapiV1ProgressGet(ctx context.Context, params *ProgressapiSdapiV1ProgressGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProgressapiSdapiV1ProgressGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromptStylesSdapiV1PromptStylesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromptStylesSdapiV1PromptStylesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealesrganModelsSdapiV1RealesrganModelsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealesrganModelsSdapiV1RealesrganModelsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshCheckpointsSdapiV1RefreshCheckpointsPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshCheckpointsSdapiV1RefreshCheckpointsPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshLorasSdapiV1RefreshLorasPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshLorasSdapiV1RefreshLorasPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshVaeSdapiV1RefreshVaePost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshVaeSdapiV1RefreshVaePostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReloadapiSdapiV1ReloadCheckpointPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReloadapiSdapiV1ReloadCheckpointPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSamplersSdapiV1SamplersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSamplersSdapiV1SamplersGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScriptInfoSdapiV1ScriptInfoGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScriptInfoSdapiV1ScriptInfoGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScriptsListSdapiV1ScriptsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScriptsListSdapiV1ScriptsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSdModelsSdapiV1SdModelsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSdModelsSdapiV1SdModelsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSdVaesSdapiV1SdVaeGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSdVaesSdapiV1SdVaeGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SkipSdapiV1SkipPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSkipSdapiV1SkipPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainEmbeddingSdapiV1TrainEmbeddingPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainEmbeddingSdapiV1TrainEmbeddingPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainEmbeddingSdapiV1TrainEmbeddingPost(ctx context.Context, body TrainEmbeddingSdapiV1TrainEmbeddingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainEmbeddingSdapiV1TrainEmbeddingPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainHypernetworkSdapiV1TrainHypernetworkPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainHypernetworkSdapiV1TrainHypernetworkPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainHypernetworkSdapiV1TrainHypernetworkPost(ctx context.Context, body TrainHypernetworkSdapiV1TrainHypernetworkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainHypernetworkSdapiV1TrainHypernetworkPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Text2imgapiSdapiV1Txt2imgPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewText2imgapiSdapiV1Txt2imgPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Text2imgapiSdapiV1Txt2imgPost(ctx context.Context, body Text2imgapiSdapiV1Txt2imgPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewText2imgapiSdapiV1Txt2imgPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnloadapiSdapiV1UnloadCheckpointPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnloadapiSdapiV1UnloadCheckpointPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpscalersSdapiV1UpscalersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpscalersSdapiV1UpscalersGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartupEventsStartupEventsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartupEventsStartupEventsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StaticResourceStaticPathGet(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStaticResourceStaticPathGetRequest(c.Server, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StreamStreamSessionHashRunComponentIdGet(ctx context.Context, sessionHash string, run int, componentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStreamStreamSessionHashRunComponentIdGetRequest(c.Server, sessionHash, run, componentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThemeCssThemeCssGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThemeCssThemeCssGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokenTokenGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenTokenGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadFileUploadPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadFileUploadPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrentUserUserGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentUserUserGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewMainGetRequest generates requests for MainGet
func NewMainGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMainHeadRequest generates requests for MainHead
func NewMainHeadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPredictApiApiNamePostRequest calls the generic PredictApiApiNamePost builder with application/json body
func NewPredictApiApiNamePostRequest(server string, apiName string, body PredictApiApiNamePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPredictApiApiNamePostRequestWithBody(server, apiName, "application/json", bodyReader)
}

// NewPredictApiApiNamePostRequestWithBody generates requests for PredictApiApiNamePost with any type of body
func NewPredictApiApiNamePostRequestWithBody(server string, apiName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppIdAppIdGetRequest generates requests for AppIdAppIdGet
func NewAppIdAppIdGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app_id/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildResourceAssetsPathGetRequest generates requests for BuildResourceAssetsPathGet
func NewBuildResourceAssetsPathGetRequest(server string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigConfigGetRequest generates requests for GetConfigConfigGet
func NewGetConfigConfigGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFaviconFaviconIcoGetRequest generates requests for FaviconFaviconIcoGet
func NewFaviconFaviconIcoGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/favicon.ico")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFileDeprecatedFilePathGetRequest generates requests for FileDeprecatedFilePathGet
func NewFileDeprecatedFilePathGetRequest(server string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFileFilePathOrUrlGetRequest generates requests for FileFilePathOrUrlGet
func NewFileFilePathOrUrlGetRequest(server string, pathOrUrl string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path_or_url", runtime.ParamLocationPath, pathOrUrl)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file=%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFileFilePathOrUrlHeadRequest generates requests for FileFilePathOrUrlHead
func NewFileFilePathOrUrlHeadRequest(server string, pathOrUrl string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path_or_url", runtime.ParamLocationPath, pathOrUrl)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file=%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiInfoInfoGetRequest generates requests for ApiInfoInfoGet
func NewApiInfoInfoGetRequest(server string, params *ApiInfoInfoGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/info/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Serialize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serialize", runtime.ParamLocationQuery, *params.Serialize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLambdaInternalPingGetRequest generates requests for LambdaInternalPingGet
func NewLambdaInternalPingGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLambdaInternalProfileStartupGetRequest generates requests for LambdaInternalProfileStartupGet
func NewLambdaInternalProfileStartupGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/profile-startup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProgressapiInternalProgressPostRequest calls the generic ProgressapiInternalProgressPost builder with application/json body
func NewProgressapiInternalProgressPostRequest(server string, body ProgressapiInternalProgressPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProgressapiInternalProgressPostRequestWithBody(server, "application/json", bodyReader)
}

// NewProgressapiInternalProgressPostRequestWithBody generates requests for ProgressapiInternalProgressPost with any type of body
func NewProgressapiInternalProgressPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/progress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQuicksettingsHintInternalQuicksettingsHintGetRequest generates requests for QuicksettingsHintInternalQuicksettingsHintGet
func NewQuicksettingsHintInternalQuicksettingsHintGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/quicksettings-hint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadSysinfoInternalSysinfoGetRequest generates requests for DownloadSysinfoInternalSysinfoGet
func NewDownloadSysinfoInternalSysinfoGetRequest(server string, params *DownloadSysinfoInternalSysinfoGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/sysinfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Attachment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attachment", runtime.ParamLocationQuery, *params.Attachment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLambdaInternalSysinfoDownloadGetRequest generates requests for LambdaInternalSysinfoDownloadGet
func NewLambdaInternalSysinfoDownloadGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/sysinfo-download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginLoginPostRequestWithFormdataBody calls the generic LoginLoginPost builder with application/x-www-form-urlencoded body
func NewLoginLoginPostRequestWithFormdataBody(server string, body LoginLoginPostFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLoginLoginPostRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewLoginLoginPostRequestWithBody generates requests for LoginLoginPost with any type of body
func NewLoginLoginPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginCheckLoginCheckGetRequest generates requests for LoginCheckLoginCheckGet
func NewLoginCheckLoginCheckGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login_check/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReverseProxyProxyUrlPathGetRequest generates requests for ReverseProxyProxyUrlPathGet
func NewReverseProxyProxyUrlPathGetRequest(server string, urlPath string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "url_path", runtime.ParamLocationPath, urlPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/proxy=%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReverseProxyProxyUrlPathHeadRequest generates requests for ReverseProxyProxyUrlPathHead
func NewReverseProxyProxyUrlPathHeadRequest(server string, urlPath string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "url_path", runtime.ParamLocationPath, urlPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/proxy=%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetQueueStatusQueueStatusGetRequest generates requests for GetQueueStatusQueueStatusGet
func NewGetQueueStatusQueueStatusGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queue/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetIteratorResetPostRequest calls the generic ResetIteratorResetPost builder with application/json body
func NewResetIteratorResetPostRequest(server string, body ResetIteratorResetPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetIteratorResetPostRequestWithBody(server, "application/json", bodyReader)
}

// NewResetIteratorResetPostRequestWithBody generates requests for ResetIteratorResetPost with any type of body
func NewResetIteratorResetPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reset/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRobotsTxtRobotsTxtGetRequest generates requests for RobotsTxtRobotsTxtGet
func NewRobotsTxtRobotsTxtGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/robots.txt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPredictRunApiNamePostRequest calls the generic PredictRunApiNamePost builder with application/json body
func NewPredictRunApiNamePostRequest(server string, apiName string, body PredictRunApiNamePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPredictRunApiNamePostRequestWithBody(server, apiName, "application/json", bodyReader)
}

// NewPredictRunApiNamePostRequestWithBody generates requests for PredictRunApiNamePost with any type of body
func NewPredictRunApiNamePostRequestWithBody(server string, apiName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/run/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSingleCardSdExtraNetworksGetSingleCardGetRequest generates requests for GetSingleCardSdExtraNetworksGetSingleCardGet
func NewGetSingleCardSdExtraNetworksGetSingleCardGetRequest(server string, params *GetSingleCardSdExtraNetworksGetSingleCardGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd_extra_networks/get-single-card")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tabname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tabname", runtime.ParamLocationQuery, *params.Tabname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetadataSdExtraNetworksMetadataGetRequest generates requests for GetMetadataSdExtraNetworksMetadataGet
func NewGetMetadataSdExtraNetworksMetadataGetRequest(server string, params *GetMetadataSdExtraNetworksMetadataGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd_extra_networks/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Item != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "item", runtime.ParamLocationQuery, *params.Item); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchFileSdExtraNetworksThumbGetRequest generates requests for FetchFileSdExtraNetworksThumbGet
func NewFetchFileSdExtraNetworksThumbGetRequest(server string, params *FetchFileSdExtraNetworksThumbGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd_extra_networks/thumb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filename != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCmdFlagsSdapiV1CmdFlagsGetRequest generates requests for GetCmdFlagsSdapiV1CmdFlagsGet
func NewGetCmdFlagsSdapiV1CmdFlagsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/cmd-flags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEmbeddingSdapiV1CreateEmbeddingPostRequest calls the generic CreateEmbeddingSdapiV1CreateEmbeddingPost builder with application/json body
func NewCreateEmbeddingSdapiV1CreateEmbeddingPostRequest(server string, body CreateEmbeddingSdapiV1CreateEmbeddingPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEmbeddingSdapiV1CreateEmbeddingPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEmbeddingSdapiV1CreateEmbeddingPostRequestWithBody generates requests for CreateEmbeddingSdapiV1CreateEmbeddingPost with any type of body
func NewCreateEmbeddingSdapiV1CreateEmbeddingPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/create/embedding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateHypernetworkSdapiV1CreateHypernetworkPostRequest calls the generic CreateHypernetworkSdapiV1CreateHypernetworkPost builder with application/json body
func NewCreateHypernetworkSdapiV1CreateHypernetworkPostRequest(server string, body CreateHypernetworkSdapiV1CreateHypernetworkPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHypernetworkSdapiV1CreateHypernetworkPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateHypernetworkSdapiV1CreateHypernetworkPostRequestWithBody generates requests for CreateHypernetworkSdapiV1CreateHypernetworkPost with any type of body
func NewCreateHypernetworkSdapiV1CreateHypernetworkPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/create/hypernetwork")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmbeddingsSdapiV1EmbeddingsGetRequest generates requests for GetEmbeddingsSdapiV1EmbeddingsGet
func NewGetEmbeddingsSdapiV1EmbeddingsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/embeddings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExtensionsListSdapiV1ExtensionsGetRequest generates requests for GetExtensionsListSdapiV1ExtensionsGet
func NewGetExtensionsListSdapiV1ExtensionsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest calls the generic ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost builder with application/json body
func NewExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest(server string, body ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequestWithBody(server, "application/json", bodyReader)
}

// NewExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequestWithBody generates requests for ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost with any type of body
func NewExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/extra-batch-images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest calls the generic ExtrasSingleImageApiSdapiV1ExtraSingleImagePost builder with application/json body
func NewExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest(server string, body ExtrasSingleImageApiSdapiV1ExtraSingleImagePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequestWithBody(server, "application/json", bodyReader)
}

// NewExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequestWithBody generates requests for ExtrasSingleImageApiSdapiV1ExtraSingleImagePost with any type of body
func NewExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/extra-single-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFaceRestorersSdapiV1FaceRestorersGetRequest generates requests for GetFaceRestorersSdapiV1FaceRestorersGet
func NewGetFaceRestorersSdapiV1FaceRestorersGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/face-restorers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHypernetworksSdapiV1HypernetworksGetRequest generates requests for GetHypernetworksSdapiV1HypernetworksGet
func NewGetHypernetworksSdapiV1HypernetworksGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/hypernetworks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImg2imgapiSdapiV1Img2imgPostRequest calls the generic Img2imgapiSdapiV1Img2imgPost builder with application/json body
func NewImg2imgapiSdapiV1Img2imgPostRequest(server string, body Img2imgapiSdapiV1Img2imgPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImg2imgapiSdapiV1Img2imgPostRequestWithBody(server, "application/json", bodyReader)
}

// NewImg2imgapiSdapiV1Img2imgPostRequestWithBody generates requests for Img2imgapiSdapiV1Img2imgPost with any type of body
func NewImg2imgapiSdapiV1Img2imgPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/img2img")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInterrogateapiSdapiV1InterrogatePostRequest calls the generic InterrogateapiSdapiV1InterrogatePost builder with application/json body
func NewInterrogateapiSdapiV1InterrogatePostRequest(server string, body InterrogateapiSdapiV1InterrogatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInterrogateapiSdapiV1InterrogatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewInterrogateapiSdapiV1InterrogatePostRequestWithBody generates requests for InterrogateapiSdapiV1InterrogatePost with any type of body
func NewInterrogateapiSdapiV1InterrogatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/interrogate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInterruptapiSdapiV1InterruptPostRequest generates requests for InterruptapiSdapiV1InterruptPost
func NewInterruptapiSdapiV1InterruptPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/interrupt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatentUpscaleModesSdapiV1LatentUpscaleModesGetRequest generates requests for GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet
func NewGetLatentUpscaleModesSdapiV1LatentUpscaleModesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/latent-upscale-modes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLorasSdapiV1LorasGetRequest generates requests for GetLorasSdapiV1LorasGet
func NewGetLorasSdapiV1LorasGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/loras")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemorySdapiV1MemoryGetRequest generates requests for GetMemorySdapiV1MemoryGet
func NewGetMemorySdapiV1MemoryGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/memory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigSdapiV1OptionsGetRequest generates requests for GetConfigSdapiV1OptionsGet
func NewGetConfigSdapiV1OptionsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetConfigSdapiV1OptionsPostRequest calls the generic SetConfigSdapiV1OptionsPost builder with application/json body
func NewSetConfigSdapiV1OptionsPostRequest(server string, body SetConfigSdapiV1OptionsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetConfigSdapiV1OptionsPostRequestWithBody(server, "application/json", bodyReader)
}

// NewSetConfigSdapiV1OptionsPostRequestWithBody generates requests for SetConfigSdapiV1OptionsPost with any type of body
func NewSetConfigSdapiV1OptionsPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPnginfoapiSdapiV1PngInfoPostRequest calls the generic PnginfoapiSdapiV1PngInfoPost builder with application/json body
func NewPnginfoapiSdapiV1PngInfoPostRequest(server string, body PnginfoapiSdapiV1PngInfoPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPnginfoapiSdapiV1PngInfoPostRequestWithBody(server, "application/json", bodyReader)
}

// NewPnginfoapiSdapiV1PngInfoPostRequestWithBody generates requests for PnginfoapiSdapiV1PngInfoPost with any type of body
func NewPnginfoapiSdapiV1PngInfoPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/png-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProgressapiSdapiV1ProgressGetRequest generates requests for ProgressapiSdapiV1ProgressGet
func NewProgressapiSdapiV1ProgressGetRequest(server string, params *ProgressapiSdapiV1ProgressGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/progress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipCurrentImage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_current_image", runtime.ParamLocationQuery, *params.SkipCurrentImage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPromptStylesSdapiV1PromptStylesGetRequest generates requests for GetPromptStylesSdapiV1PromptStylesGet
func NewGetPromptStylesSdapiV1PromptStylesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/prompt-styles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealesrganModelsSdapiV1RealesrganModelsGetRequest generates requests for GetRealesrganModelsSdapiV1RealesrganModelsGet
func NewGetRealesrganModelsSdapiV1RealesrganModelsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/realesrgan-models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshCheckpointsSdapiV1RefreshCheckpointsPostRequest generates requests for RefreshCheckpointsSdapiV1RefreshCheckpointsPost
func NewRefreshCheckpointsSdapiV1RefreshCheckpointsPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/refresh-checkpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshLorasSdapiV1RefreshLorasPostRequest generates requests for RefreshLorasSdapiV1RefreshLorasPost
func NewRefreshLorasSdapiV1RefreshLorasPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/refresh-loras")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshVaeSdapiV1RefreshVaePostRequest generates requests for RefreshVaeSdapiV1RefreshVaePost
func NewRefreshVaeSdapiV1RefreshVaePostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/refresh-vae")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReloadapiSdapiV1ReloadCheckpointPostRequest generates requests for ReloadapiSdapiV1ReloadCheckpointPost
func NewReloadapiSdapiV1ReloadCheckpointPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/reload-checkpoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSamplersSdapiV1SamplersGetRequest generates requests for GetSamplersSdapiV1SamplersGet
func NewGetSamplersSdapiV1SamplersGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/samplers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScriptInfoSdapiV1ScriptInfoGetRequest generates requests for GetScriptInfoSdapiV1ScriptInfoGet
func NewGetScriptInfoSdapiV1ScriptInfoGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/script-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScriptsListSdapiV1ScriptsGetRequest generates requests for GetScriptsListSdapiV1ScriptsGet
func NewGetScriptsListSdapiV1ScriptsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/scripts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSdModelsSdapiV1SdModelsGetRequest generates requests for GetSdModelsSdapiV1SdModelsGet
func NewGetSdModelsSdapiV1SdModelsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/sd-models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSdVaesSdapiV1SdVaeGetRequest generates requests for GetSdVaesSdapiV1SdVaeGet
func NewGetSdVaesSdapiV1SdVaeGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/sd-vae")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSkipSdapiV1SkipPostRequest generates requests for SkipSdapiV1SkipPost
func NewSkipSdapiV1SkipPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/skip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainEmbeddingSdapiV1TrainEmbeddingPostRequest calls the generic TrainEmbeddingSdapiV1TrainEmbeddingPost builder with application/json body
func NewTrainEmbeddingSdapiV1TrainEmbeddingPostRequest(server string, body TrainEmbeddingSdapiV1TrainEmbeddingPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTrainEmbeddingSdapiV1TrainEmbeddingPostRequestWithBody(server, "application/json", bodyReader)
}

// NewTrainEmbeddingSdapiV1TrainEmbeddingPostRequestWithBody generates requests for TrainEmbeddingSdapiV1TrainEmbeddingPost with any type of body
func NewTrainEmbeddingSdapiV1TrainEmbeddingPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/train/embedding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTrainHypernetworkSdapiV1TrainHypernetworkPostRequest calls the generic TrainHypernetworkSdapiV1TrainHypernetworkPost builder with application/json body
func NewTrainHypernetworkSdapiV1TrainHypernetworkPostRequest(server string, body TrainHypernetworkSdapiV1TrainHypernetworkPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTrainHypernetworkSdapiV1TrainHypernetworkPostRequestWithBody(server, "application/json", bodyReader)
}

// NewTrainHypernetworkSdapiV1TrainHypernetworkPostRequestWithBody generates requests for TrainHypernetworkSdapiV1TrainHypernetworkPost with any type of body
func NewTrainHypernetworkSdapiV1TrainHypernetworkPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/train/hypernetwork")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewText2imgapiSdapiV1Txt2imgPostRequest calls the generic Text2imgapiSdapiV1Txt2imgPost builder with application/json body
func NewText2imgapiSdapiV1Txt2imgPostRequest(server string, body Text2imgapiSdapiV1Txt2imgPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewText2imgapiSdapiV1Txt2imgPostRequestWithBody(server, "application/json", bodyReader)
}

// NewText2imgapiSdapiV1Txt2imgPostRequestWithBody generates requests for Text2imgapiSdapiV1Txt2imgPost with any type of body
func NewText2imgapiSdapiV1Txt2imgPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/txt2img")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnloadapiSdapiV1UnloadCheckpointPostRequest generates requests for UnloadapiSdapiV1UnloadCheckpointPost
func NewUnloadapiSdapiV1UnloadCheckpointPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/unload-checkpoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUpscalersSdapiV1UpscalersGetRequest generates requests for GetUpscalersSdapiV1UpscalersGet
func NewGetUpscalersSdapiV1UpscalersGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sdapi/v1/upscalers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartupEventsStartupEventsGetRequest generates requests for StartupEventsStartupEventsGet
func NewStartupEventsStartupEventsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/startup-events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStaticResourceStaticPathGetRequest generates requests for StaticResourceStaticPathGet
func NewStaticResourceStaticPathGetRequest(server string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/static/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStreamStreamSessionHashRunComponentIdGetRequest generates requests for StreamStreamSessionHashRunComponentIdGet
func NewStreamStreamSessionHashRunComponentIdGetRequest(server string, sessionHash string, run int, componentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session_hash", runtime.ParamLocationPath, sessionHash)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "run", runtime.ParamLocationPath, run)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "component_id", runtime.ParamLocationPath, componentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stream/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThemeCssThemeCssGetRequest generates requests for ThemeCssThemeCssGet
func NewThemeCssThemeCssGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/theme.css")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokenTokenGetRequest generates requests for GetTokenTokenGet
func NewGetTokenTokenGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadFileUploadPostRequestWithBody generates requests for UploadFileUploadPost with any type of body
func NewUploadFileUploadPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCurrentUserUserGetRequest generates requests for GetCurrentUserUserGet
func NewGetCurrentUserUserGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// MainGetWithResponse request
	MainGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MainGetResponse, error)

	// MainHeadWithResponse request
	MainHeadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MainHeadResponse, error)

	// PredictApiApiNamePostWithBodyWithResponse request with any body
	PredictApiApiNamePostWithBodyWithResponse(ctx context.Context, apiName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PredictApiApiNamePostResponse, error)

	PredictApiApiNamePostWithResponse(ctx context.Context, apiName string, body PredictApiApiNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*PredictApiApiNamePostResponse, error)

	// AppIdAppIdGetWithResponse request
	AppIdAppIdGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AppIdAppIdGetResponse, error)

	// BuildResourceAssetsPathGetWithResponse request
	BuildResourceAssetsPathGetWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*BuildResourceAssetsPathGetResponse, error)

	// GetConfigConfigGetWithResponse request
	GetConfigConfigGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigConfigGetResponse, error)

	// FaviconFaviconIcoGetWithResponse request
	FaviconFaviconIcoGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FaviconFaviconIcoGetResponse, error)

	// FileDeprecatedFilePathGetWithResponse request
	FileDeprecatedFilePathGetWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*FileDeprecatedFilePathGetResponse, error)

	// FileFilePathOrUrlGetWithResponse request
	FileFilePathOrUrlGetWithResponse(ctx context.Context, pathOrUrl string, reqEditors ...RequestEditorFn) (*FileFilePathOrUrlGetResponse, error)

	// FileFilePathOrUrlHeadWithResponse request
	FileFilePathOrUrlHeadWithResponse(ctx context.Context, pathOrUrl string, reqEditors ...RequestEditorFn) (*FileFilePathOrUrlHeadResponse, error)

	// ApiInfoInfoGetWithResponse request
	ApiInfoInfoGetWithResponse(ctx context.Context, params *ApiInfoInfoGetParams, reqEditors ...RequestEditorFn) (*ApiInfoInfoGetResponse, error)

	// LambdaInternalPingGetWithResponse request
	LambdaInternalPingGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LambdaInternalPingGetResponse, error)

	// LambdaInternalProfileStartupGetWithResponse request
	LambdaInternalProfileStartupGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LambdaInternalProfileStartupGetResponse, error)

	// ProgressapiInternalProgressPostWithBodyWithResponse request with any body
	ProgressapiInternalProgressPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressapiInternalProgressPostResponse, error)

	ProgressapiInternalProgressPostWithResponse(ctx context.Context, body ProgressapiInternalProgressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressapiInternalProgressPostResponse, error)

	// QuicksettingsHintInternalQuicksettingsHintGetWithResponse request
	QuicksettingsHintInternalQuicksettingsHintGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*QuicksettingsHintInternalQuicksettingsHintGetResponse, error)

	// DownloadSysinfoInternalSysinfoGetWithResponse request
	DownloadSysinfoInternalSysinfoGetWithResponse(ctx context.Context, params *DownloadSysinfoInternalSysinfoGetParams, reqEditors ...RequestEditorFn) (*DownloadSysinfoInternalSysinfoGetResponse, error)

	// LambdaInternalSysinfoDownloadGetWithResponse request
	LambdaInternalSysinfoDownloadGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LambdaInternalSysinfoDownloadGetResponse, error)

	// LoginLoginPostWithBodyWithResponse request with any body
	LoginLoginPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginLoginPostResponse, error)

	LoginLoginPostWithFormdataBodyWithResponse(ctx context.Context, body LoginLoginPostFormdataRequestBody, reqEditors ...RequestEditorFn) (*LoginLoginPostResponse, error)

	// LoginCheckLoginCheckGetWithResponse request
	LoginCheckLoginCheckGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoginCheckLoginCheckGetResponse, error)

	// ReverseProxyProxyUrlPathGetWithResponse request
	ReverseProxyProxyUrlPathGetWithResponse(ctx context.Context, urlPath string, reqEditors ...RequestEditorFn) (*ReverseProxyProxyUrlPathGetResponse, error)

	// ReverseProxyProxyUrlPathHeadWithResponse request
	ReverseProxyProxyUrlPathHeadWithResponse(ctx context.Context, urlPath string, reqEditors ...RequestEditorFn) (*ReverseProxyProxyUrlPathHeadResponse, error)

	// GetQueueStatusQueueStatusGetWithResponse request
	GetQueueStatusQueueStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetQueueStatusQueueStatusGetResponse, error)

	// ResetIteratorResetPostWithBodyWithResponse request with any body
	ResetIteratorResetPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetIteratorResetPostResponse, error)

	ResetIteratorResetPostWithResponse(ctx context.Context, body ResetIteratorResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetIteratorResetPostResponse, error)

	// RobotsTxtRobotsTxtGetWithResponse request
	RobotsTxtRobotsTxtGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RobotsTxtRobotsTxtGetResponse, error)

	// PredictRunApiNamePostWithBodyWithResponse request with any body
	PredictRunApiNamePostWithBodyWithResponse(ctx context.Context, apiName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PredictRunApiNamePostResponse, error)

	PredictRunApiNamePostWithResponse(ctx context.Context, apiName string, body PredictRunApiNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*PredictRunApiNamePostResponse, error)

	// GetSingleCardSdExtraNetworksGetSingleCardGetWithResponse request
	GetSingleCardSdExtraNetworksGetSingleCardGetWithResponse(ctx context.Context, params *GetSingleCardSdExtraNetworksGetSingleCardGetParams, reqEditors ...RequestEditorFn) (*GetSingleCardSdExtraNetworksGetSingleCardGetResponse, error)

	// GetMetadataSdExtraNetworksMetadataGetWithResponse request
	GetMetadataSdExtraNetworksMetadataGetWithResponse(ctx context.Context, params *GetMetadataSdExtraNetworksMetadataGetParams, reqEditors ...RequestEditorFn) (*GetMetadataSdExtraNetworksMetadataGetResponse, error)

	// FetchFileSdExtraNetworksThumbGetWithResponse request
	FetchFileSdExtraNetworksThumbGetWithResponse(ctx context.Context, params *FetchFileSdExtraNetworksThumbGetParams, reqEditors ...RequestEditorFn) (*FetchFileSdExtraNetworksThumbGetResponse, error)

	// GetCmdFlagsSdapiV1CmdFlagsGetWithResponse request
	GetCmdFlagsSdapiV1CmdFlagsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCmdFlagsSdapiV1CmdFlagsGetResponse, error)

	// CreateEmbeddingSdapiV1CreateEmbeddingPostWithBodyWithResponse request with any body
	CreateEmbeddingSdapiV1CreateEmbeddingPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEmbeddingSdapiV1CreateEmbeddingPostResponse, error)

	CreateEmbeddingSdapiV1CreateEmbeddingPostWithResponse(ctx context.Context, body CreateEmbeddingSdapiV1CreateEmbeddingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEmbeddingSdapiV1CreateEmbeddingPostResponse, error)

	// CreateHypernetworkSdapiV1CreateHypernetworkPostWithBodyWithResponse request with any body
	CreateHypernetworkSdapiV1CreateHypernetworkPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHypernetworkSdapiV1CreateHypernetworkPostResponse, error)

	CreateHypernetworkSdapiV1CreateHypernetworkPostWithResponse(ctx context.Context, body CreateHypernetworkSdapiV1CreateHypernetworkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHypernetworkSdapiV1CreateHypernetworkPostResponse, error)

	// GetEmbeddingsSdapiV1EmbeddingsGetWithResponse request
	GetEmbeddingsSdapiV1EmbeddingsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEmbeddingsSdapiV1EmbeddingsGetResponse, error)

	// GetExtensionsListSdapiV1ExtensionsGetWithResponse request
	GetExtensionsListSdapiV1ExtensionsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExtensionsListSdapiV1ExtensionsGetResponse, error)

	// ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithBodyWithResponse request with any body
	ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse, error)

	ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithResponse(ctx context.Context, body ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse, error)

	// ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithBodyWithResponse request with any body
	ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse, error)

	ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithResponse(ctx context.Context, body ExtrasSingleImageApiSdapiV1ExtraSingleImagePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse, error)

	// GetFaceRestorersSdapiV1FaceRestorersGetWithResponse request
	GetFaceRestorersSdapiV1FaceRestorersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFaceRestorersSdapiV1FaceRestorersGetResponse, error)

	// GetHypernetworksSdapiV1HypernetworksGetWithResponse request
	GetHypernetworksSdapiV1HypernetworksGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHypernetworksSdapiV1HypernetworksGetResponse, error)

	// Img2imgapiSdapiV1Img2imgPostWithBodyWithResponse request with any body
	Img2imgapiSdapiV1Img2imgPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Img2imgapiSdapiV1Img2imgPostResponse, error)

	Img2imgapiSdapiV1Img2imgPostWithResponse(ctx context.Context, body Img2imgapiSdapiV1Img2imgPostJSONRequestBody, reqEditors ...RequestEditorFn) (*Img2imgapiSdapiV1Img2imgPostResponse, error)

	// InterrogateapiSdapiV1InterrogatePostWithBodyWithResponse request with any body
	InterrogateapiSdapiV1InterrogatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InterrogateapiSdapiV1InterrogatePostResponse, error)

	InterrogateapiSdapiV1InterrogatePostWithResponse(ctx context.Context, body InterrogateapiSdapiV1InterrogatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*InterrogateapiSdapiV1InterrogatePostResponse, error)

	// InterruptapiSdapiV1InterruptPostWithResponse request
	InterruptapiSdapiV1InterruptPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InterruptapiSdapiV1InterruptPostResponse, error)

	// GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithResponse request
	GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse, error)

	// GetLorasSdapiV1LorasGetWithResponse request
	GetLorasSdapiV1LorasGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLorasSdapiV1LorasGetResponse, error)

	// GetMemorySdapiV1MemoryGetWithResponse request
	GetMemorySdapiV1MemoryGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMemorySdapiV1MemoryGetResponse, error)

	// GetConfigSdapiV1OptionsGetWithResponse request
	GetConfigSdapiV1OptionsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigSdapiV1OptionsGetResponse, error)

	// SetConfigSdapiV1OptionsPostWithBodyWithResponse request with any body
	SetConfigSdapiV1OptionsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetConfigSdapiV1OptionsPostResponse, error)

	SetConfigSdapiV1OptionsPostWithResponse(ctx context.Context, body SetConfigSdapiV1OptionsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*SetConfigSdapiV1OptionsPostResponse, error)

	// PnginfoapiSdapiV1PngInfoPostWithBodyWithResponse request with any body
	PnginfoapiSdapiV1PngInfoPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PnginfoapiSdapiV1PngInfoPostResponse, error)

	PnginfoapiSdapiV1PngInfoPostWithResponse(ctx context.Context, body PnginfoapiSdapiV1PngInfoPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PnginfoapiSdapiV1PngInfoPostResponse, error)

	// ProgressapiSdapiV1ProgressGetWithResponse request
	ProgressapiSdapiV1ProgressGetWithResponse(ctx context.Context, params *ProgressapiSdapiV1ProgressGetParams, reqEditors ...RequestEditorFn) (*ProgressapiSdapiV1ProgressGetResponse, error)

	// GetPromptStylesSdapiV1PromptStylesGetWithResponse request
	GetPromptStylesSdapiV1PromptStylesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPromptStylesSdapiV1PromptStylesGetResponse, error)

	// GetRealesrganModelsSdapiV1RealesrganModelsGetWithResponse request
	GetRealesrganModelsSdapiV1RealesrganModelsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRealesrganModelsSdapiV1RealesrganModelsGetResponse, error)

	// RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithResponse request
	RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse, error)

	// RefreshLorasSdapiV1RefreshLorasPostWithResponse request
	RefreshLorasSdapiV1RefreshLorasPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshLorasSdapiV1RefreshLorasPostResponse, error)

	// RefreshVaeSdapiV1RefreshVaePostWithResponse request
	RefreshVaeSdapiV1RefreshVaePostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshVaeSdapiV1RefreshVaePostResponse, error)

	// ReloadapiSdapiV1ReloadCheckpointPostWithResponse request
	ReloadapiSdapiV1ReloadCheckpointPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReloadapiSdapiV1ReloadCheckpointPostResponse, error)

	// GetSamplersSdapiV1SamplersGetWithResponse request
	GetSamplersSdapiV1SamplersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSamplersSdapiV1SamplersGetResponse, error)

	// GetScriptInfoSdapiV1ScriptInfoGetWithResponse request
	GetScriptInfoSdapiV1ScriptInfoGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetScriptInfoSdapiV1ScriptInfoGetResponse, error)

	// GetScriptsListSdapiV1ScriptsGetWithResponse request
	GetScriptsListSdapiV1ScriptsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetScriptsListSdapiV1ScriptsGetResponse, error)

	// GetSdModelsSdapiV1SdModelsGetWithResponse request
	GetSdModelsSdapiV1SdModelsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSdModelsSdapiV1SdModelsGetResponse, error)

	// GetSdVaesSdapiV1SdVaeGetWithResponse request
	GetSdVaesSdapiV1SdVaeGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSdVaesSdapiV1SdVaeGetResponse, error)

	// SkipSdapiV1SkipPostWithResponse request
	SkipSdapiV1SkipPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SkipSdapiV1SkipPostResponse, error)

	// TrainEmbeddingSdapiV1TrainEmbeddingPostWithBodyWithResponse request with any body
	TrainEmbeddingSdapiV1TrainEmbeddingPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainEmbeddingSdapiV1TrainEmbeddingPostResponse, error)

	TrainEmbeddingSdapiV1TrainEmbeddingPostWithResponse(ctx context.Context, body TrainEmbeddingSdapiV1TrainEmbeddingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TrainEmbeddingSdapiV1TrainEmbeddingPostResponse, error)

	// TrainHypernetworkSdapiV1TrainHypernetworkPostWithBodyWithResponse request with any body
	TrainHypernetworkSdapiV1TrainHypernetworkPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainHypernetworkSdapiV1TrainHypernetworkPostResponse, error)

	TrainHypernetworkSdapiV1TrainHypernetworkPostWithResponse(ctx context.Context, body TrainHypernetworkSdapiV1TrainHypernetworkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TrainHypernetworkSdapiV1TrainHypernetworkPostResponse, error)

	// Text2imgapiSdapiV1Txt2imgPostWithBodyWithResponse request with any body
	Text2imgapiSdapiV1Txt2imgPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Text2imgapiSdapiV1Txt2imgPostResponse, error)

	Text2imgapiSdapiV1Txt2imgPostWithResponse(ctx context.Context, body Text2imgapiSdapiV1Txt2imgPostJSONRequestBody, reqEditors ...RequestEditorFn) (*Text2imgapiSdapiV1Txt2imgPostResponse, error)

	// UnloadapiSdapiV1UnloadCheckpointPostWithResponse request
	UnloadapiSdapiV1UnloadCheckpointPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UnloadapiSdapiV1UnloadCheckpointPostResponse, error)

	// GetUpscalersSdapiV1UpscalersGetWithResponse request
	GetUpscalersSdapiV1UpscalersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpscalersSdapiV1UpscalersGetResponse, error)

	// StartupEventsStartupEventsGetWithResponse request
	StartupEventsStartupEventsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StartupEventsStartupEventsGetResponse, error)

	// StaticResourceStaticPathGetWithResponse request
	StaticResourceStaticPathGetWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*StaticResourceStaticPathGetResponse, error)

	// StreamStreamSessionHashRunComponentIdGetWithResponse request
	StreamStreamSessionHashRunComponentIdGetWithResponse(ctx context.Context, sessionHash string, run int, componentId int, reqEditors ...RequestEditorFn) (*StreamStreamSessionHashRunComponentIdGetResponse, error)

	// ThemeCssThemeCssGetWithResponse request
	ThemeCssThemeCssGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ThemeCssThemeCssGetResponse, error)

	// GetTokenTokenGetWithResponse request
	GetTokenTokenGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokenTokenGetResponse, error)

	// UploadFileUploadPostWithBodyWithResponse request with any body
	UploadFileUploadPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileUploadPostResponse, error)

	// GetCurrentUserUserGetWithResponse request
	GetCurrentUserUserGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserUserGetResponse, error)
}

type MainGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MainGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MainGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MainHeadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MainHeadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MainHeadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PredictApiApiNamePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r PredictApiApiNamePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PredictApiApiNamePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppIdAppIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r AppIdAppIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppIdAppIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildResourceAssetsPathGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r BuildResourceAssetsPathGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildResourceAssetsPathGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigConfigGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetConfigConfigGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigConfigGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FaviconFaviconIcoGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r FaviconFaviconIcoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FaviconFaviconIcoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FileDeprecatedFilePathGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r FileDeprecatedFilePathGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FileDeprecatedFilePathGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FileFilePathOrUrlGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r FileFilePathOrUrlGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FileFilePathOrUrlGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FileFilePathOrUrlHeadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r FileFilePathOrUrlHeadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FileFilePathOrUrlHeadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiInfoInfoGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ApiInfoInfoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiInfoInfoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LambdaInternalPingGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r LambdaInternalPingGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LambdaInternalPingGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LambdaInternalProfileStartupGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r LambdaInternalProfileStartupGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LambdaInternalProfileStartupGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProgressapiInternalProgressPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModulesProgressProgressResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ProgressapiInternalProgressPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProgressapiInternalProgressPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuicksettingsHintInternalQuicksettingsHintGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]QuicksettingsHint
}

// Status returns HTTPResponse.Status
func (r QuicksettingsHintInternalQuicksettingsHintGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuicksettingsHintInternalQuicksettingsHintGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadSysinfoInternalSysinfoGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DownloadSysinfoInternalSysinfoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadSysinfoInternalSysinfoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LambdaInternalSysinfoDownloadGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r LambdaInternalSysinfoDownloadGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LambdaInternalSysinfoDownloadGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginLoginPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r LoginLoginPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginLoginPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginCheckLoginCheckGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r LoginCheckLoginCheckGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginCheckLoginCheckGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReverseProxyProxyUrlPathGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ReverseProxyProxyUrlPathGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReverseProxyProxyUrlPathGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReverseProxyProxyUrlPathHeadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ReverseProxyProxyUrlPathHeadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReverseProxyProxyUrlPathHeadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQueueStatusQueueStatusGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Estimation
}

// Status returns HTTPResponse.Status
func (r GetQueueStatusQueueStatusGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQueueStatusQueueStatusGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetIteratorResetPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ResetIteratorResetPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetIteratorResetPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RobotsTxtRobotsTxtGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RobotsTxtRobotsTxtGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RobotsTxtRobotsTxtGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PredictRunApiNamePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r PredictRunApiNamePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PredictRunApiNamePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSingleCardSdExtraNetworksGetSingleCardGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetSingleCardSdExtraNetworksGetSingleCardGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSingleCardSdExtraNetworksGetSingleCardGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetadataSdExtraNetworksMetadataGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetMetadataSdExtraNetworksMetadataGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetadataSdExtraNetworksMetadataGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchFileSdExtraNetworksThumbGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r FetchFileSdExtraNetworksThumbGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchFileSdExtraNetworksThumbGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCmdFlagsSdapiV1CmdFlagsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Flags
}

// Status returns HTTPResponse.Status
func (r GetCmdFlagsSdapiV1CmdFlagsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCmdFlagsSdapiV1CmdFlagsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEmbeddingSdapiV1CreateEmbeddingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateEmbeddingSdapiV1CreateEmbeddingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEmbeddingSdapiV1CreateEmbeddingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHypernetworkSdapiV1CreateHypernetworkPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateHypernetworkSdapiV1CreateHypernetworkPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHypernetworkSdapiV1CreateHypernetworkPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbeddingsSdapiV1EmbeddingsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmbeddingsResponse
}

// Status returns HTTPResponse.Status
func (r GetEmbeddingsSdapiV1EmbeddingsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbeddingsSdapiV1EmbeddingsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExtensionsListSdapiV1ExtensionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ExtensionItem
}

// Status returns HTTPResponse.Status
func (r GetExtensionsListSdapiV1ExtensionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExtensionsListSdapiV1ExtensionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExtrasBatchImagesResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExtrasSingleImageResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFaceRestorersSdapiV1FaceRestorersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FaceRestorerItem
}

// Status returns HTTPResponse.Status
func (r GetFaceRestorersSdapiV1FaceRestorersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFaceRestorersSdapiV1FaceRestorersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHypernetworksSdapiV1HypernetworksGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HypernetworkItem
}

// Status returns HTTPResponse.Status
func (r GetHypernetworksSdapiV1HypernetworksGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHypernetworksSdapiV1HypernetworksGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Img2imgapiSdapiV1Img2imgPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageToImageResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r Img2imgapiSdapiV1Img2imgPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Img2imgapiSdapiV1Img2imgPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InterrogateapiSdapiV1InterrogatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r InterrogateapiSdapiV1InterrogatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InterrogateapiSdapiV1InterrogatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InterruptapiSdapiV1InterruptPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r InterruptapiSdapiV1InterruptPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InterruptapiSdapiV1InterruptPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LatentUpscalerModeItem
}

// Status returns HTTPResponse.Status
func (r GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLorasSdapiV1LorasGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetLorasSdapiV1LorasGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLorasSdapiV1LorasGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemorySdapiV1MemoryGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemoryResponse
}

// Status returns HTTPResponse.Status
func (r GetMemorySdapiV1MemoryGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemorySdapiV1MemoryGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigSdapiV1OptionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Options
}

// Status returns HTTPResponse.Status
func (r GetConfigSdapiV1OptionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigSdapiV1OptionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetConfigSdapiV1OptionsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SetConfigSdapiV1OptionsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetConfigSdapiV1OptionsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PnginfoapiSdapiV1PngInfoPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PNGInfoResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r PnginfoapiSdapiV1PngInfoPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PnginfoapiSdapiV1PngInfoPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProgressapiSdapiV1ProgressGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModulesApiModelsProgressResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ProgressapiSdapiV1ProgressGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProgressapiSdapiV1ProgressGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPromptStylesSdapiV1PromptStylesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PromptStyleItem
}

// Status returns HTTPResponse.Status
func (r GetPromptStylesSdapiV1PromptStylesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromptStylesSdapiV1PromptStylesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealesrganModelsSdapiV1RealesrganModelsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RealesrganItem
}

// Status returns HTTPResponse.Status
func (r GetRealesrganModelsSdapiV1RealesrganModelsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealesrganModelsSdapiV1RealesrganModelsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r RefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshLorasSdapiV1RefreshLorasPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r RefreshLorasSdapiV1RefreshLorasPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshLorasSdapiV1RefreshLorasPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshVaeSdapiV1RefreshVaePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r RefreshVaeSdapiV1RefreshVaePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshVaeSdapiV1RefreshVaePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReloadapiSdapiV1ReloadCheckpointPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ReloadapiSdapiV1ReloadCheckpointPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReloadapiSdapiV1ReloadCheckpointPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSamplersSdapiV1SamplersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SamplerItem
}

// Status returns HTTPResponse.Status
func (r GetSamplersSdapiV1SamplersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSamplersSdapiV1SamplersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScriptInfoSdapiV1ScriptInfoGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ScriptInfo
}

// Status returns HTTPResponse.Status
func (r GetScriptInfoSdapiV1ScriptInfoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScriptInfoSdapiV1ScriptInfoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScriptsListSdapiV1ScriptsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScriptsList
}

// Status returns HTTPResponse.Status
func (r GetScriptsListSdapiV1ScriptsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScriptsListSdapiV1ScriptsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSdModelsSdapiV1SdModelsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SDModelItem
}

// Status returns HTTPResponse.Status
func (r GetSdModelsSdapiV1SdModelsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSdModelsSdapiV1SdModelsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSdVaesSdapiV1SdVaeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SDVaeItem
}

// Status returns HTTPResponse.Status
func (r GetSdVaesSdapiV1SdVaeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSdVaesSdapiV1SdVaeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SkipSdapiV1SkipPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r SkipSdapiV1SkipPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SkipSdapiV1SkipPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainEmbeddingSdapiV1TrainEmbeddingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrainResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r TrainEmbeddingSdapiV1TrainEmbeddingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainEmbeddingSdapiV1TrainEmbeddingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainHypernetworkSdapiV1TrainHypernetworkPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrainResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r TrainHypernetworkSdapiV1TrainHypernetworkPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainHypernetworkSdapiV1TrainHypernetworkPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Text2imgapiSdapiV1Txt2imgPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TextToImageResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r Text2imgapiSdapiV1Txt2imgPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Text2imgapiSdapiV1Txt2imgPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnloadapiSdapiV1UnloadCheckpointPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r UnloadapiSdapiV1UnloadCheckpointPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnloadapiSdapiV1UnloadCheckpointPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpscalersSdapiV1UpscalersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UpscalerItem
}

// Status returns HTTPResponse.Status
func (r GetUpscalersSdapiV1UpscalersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpscalersSdapiV1UpscalersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartupEventsStartupEventsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r StartupEventsStartupEventsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartupEventsStartupEventsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StaticResourceStaticPathGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r StaticResourceStaticPathGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StaticResourceStaticPathGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StreamStreamSessionHashRunComponentIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r StreamStreamSessionHashRunComponentIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StreamStreamSessionHashRunComponentIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThemeCssThemeCssGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ThemeCssThemeCssGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThemeCssThemeCssGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenTokenGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTokenTokenGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenTokenGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadFileUploadPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UploadFileUploadPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadFileUploadPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrentUserUserGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetCurrentUserUserGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentUserUserGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// MainGetWithResponse request returning *MainGetResponse
func (c *ClientWithResponses) MainGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MainGetResponse, error) {
	rsp, err := c.MainGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMainGetResponse(rsp)
}

// MainHeadWithResponse request returning *MainHeadResponse
func (c *ClientWithResponses) MainHeadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MainHeadResponse, error) {
	rsp, err := c.MainHead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMainHeadResponse(rsp)
}

// PredictApiApiNamePostWithBodyWithResponse request with arbitrary body returning *PredictApiApiNamePostResponse
func (c *ClientWithResponses) PredictApiApiNamePostWithBodyWithResponse(ctx context.Context, apiName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PredictApiApiNamePostResponse, error) {
	rsp, err := c.PredictApiApiNamePostWithBody(ctx, apiName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePredictApiApiNamePostResponse(rsp)
}

func (c *ClientWithResponses) PredictApiApiNamePostWithResponse(ctx context.Context, apiName string, body PredictApiApiNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*PredictApiApiNamePostResponse, error) {
	rsp, err := c.PredictApiApiNamePost(ctx, apiName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePredictApiApiNamePostResponse(rsp)
}

// AppIdAppIdGetWithResponse request returning *AppIdAppIdGetResponse
func (c *ClientWithResponses) AppIdAppIdGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AppIdAppIdGetResponse, error) {
	rsp, err := c.AppIdAppIdGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppIdAppIdGetResponse(rsp)
}

// BuildResourceAssetsPathGetWithResponse request returning *BuildResourceAssetsPathGetResponse
func (c *ClientWithResponses) BuildResourceAssetsPathGetWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*BuildResourceAssetsPathGetResponse, error) {
	rsp, err := c.BuildResourceAssetsPathGet(ctx, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildResourceAssetsPathGetResponse(rsp)
}

// GetConfigConfigGetWithResponse request returning *GetConfigConfigGetResponse
func (c *ClientWithResponses) GetConfigConfigGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigConfigGetResponse, error) {
	rsp, err := c.GetConfigConfigGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigConfigGetResponse(rsp)
}

// FaviconFaviconIcoGetWithResponse request returning *FaviconFaviconIcoGetResponse
func (c *ClientWithResponses) FaviconFaviconIcoGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FaviconFaviconIcoGetResponse, error) {
	rsp, err := c.FaviconFaviconIcoGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFaviconFaviconIcoGetResponse(rsp)
}

// FileDeprecatedFilePathGetWithResponse request returning *FileDeprecatedFilePathGetResponse
func (c *ClientWithResponses) FileDeprecatedFilePathGetWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*FileDeprecatedFilePathGetResponse, error) {
	rsp, err := c.FileDeprecatedFilePathGet(ctx, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFileDeprecatedFilePathGetResponse(rsp)
}

// FileFilePathOrUrlGetWithResponse request returning *FileFilePathOrUrlGetResponse
func (c *ClientWithResponses) FileFilePathOrUrlGetWithResponse(ctx context.Context, pathOrUrl string, reqEditors ...RequestEditorFn) (*FileFilePathOrUrlGetResponse, error) {
	rsp, err := c.FileFilePathOrUrlGet(ctx, pathOrUrl, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFileFilePathOrUrlGetResponse(rsp)
}

// FileFilePathOrUrlHeadWithResponse request returning *FileFilePathOrUrlHeadResponse
func (c *ClientWithResponses) FileFilePathOrUrlHeadWithResponse(ctx context.Context, pathOrUrl string, reqEditors ...RequestEditorFn) (*FileFilePathOrUrlHeadResponse, error) {
	rsp, err := c.FileFilePathOrUrlHead(ctx, pathOrUrl, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFileFilePathOrUrlHeadResponse(rsp)
}

// ApiInfoInfoGetWithResponse request returning *ApiInfoInfoGetResponse
func (c *ClientWithResponses) ApiInfoInfoGetWithResponse(ctx context.Context, params *ApiInfoInfoGetParams, reqEditors ...RequestEditorFn) (*ApiInfoInfoGetResponse, error) {
	rsp, err := c.ApiInfoInfoGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiInfoInfoGetResponse(rsp)
}

// LambdaInternalPingGetWithResponse request returning *LambdaInternalPingGetResponse
func (c *ClientWithResponses) LambdaInternalPingGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LambdaInternalPingGetResponse, error) {
	rsp, err := c.LambdaInternalPingGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLambdaInternalPingGetResponse(rsp)
}

// LambdaInternalProfileStartupGetWithResponse request returning *LambdaInternalProfileStartupGetResponse
func (c *ClientWithResponses) LambdaInternalProfileStartupGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LambdaInternalProfileStartupGetResponse, error) {
	rsp, err := c.LambdaInternalProfileStartupGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLambdaInternalProfileStartupGetResponse(rsp)
}

// ProgressapiInternalProgressPostWithBodyWithResponse request with arbitrary body returning *ProgressapiInternalProgressPostResponse
func (c *ClientWithResponses) ProgressapiInternalProgressPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProgressapiInternalProgressPostResponse, error) {
	rsp, err := c.ProgressapiInternalProgressPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressapiInternalProgressPostResponse(rsp)
}

func (c *ClientWithResponses) ProgressapiInternalProgressPostWithResponse(ctx context.Context, body ProgressapiInternalProgressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ProgressapiInternalProgressPostResponse, error) {
	rsp, err := c.ProgressapiInternalProgressPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressapiInternalProgressPostResponse(rsp)
}

// QuicksettingsHintInternalQuicksettingsHintGetWithResponse request returning *QuicksettingsHintInternalQuicksettingsHintGetResponse
func (c *ClientWithResponses) QuicksettingsHintInternalQuicksettingsHintGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*QuicksettingsHintInternalQuicksettingsHintGetResponse, error) {
	rsp, err := c.QuicksettingsHintInternalQuicksettingsHintGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuicksettingsHintInternalQuicksettingsHintGetResponse(rsp)
}

// DownloadSysinfoInternalSysinfoGetWithResponse request returning *DownloadSysinfoInternalSysinfoGetResponse
func (c *ClientWithResponses) DownloadSysinfoInternalSysinfoGetWithResponse(ctx context.Context, params *DownloadSysinfoInternalSysinfoGetParams, reqEditors ...RequestEditorFn) (*DownloadSysinfoInternalSysinfoGetResponse, error) {
	rsp, err := c.DownloadSysinfoInternalSysinfoGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadSysinfoInternalSysinfoGetResponse(rsp)
}

// LambdaInternalSysinfoDownloadGetWithResponse request returning *LambdaInternalSysinfoDownloadGetResponse
func (c *ClientWithResponses) LambdaInternalSysinfoDownloadGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LambdaInternalSysinfoDownloadGetResponse, error) {
	rsp, err := c.LambdaInternalSysinfoDownloadGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLambdaInternalSysinfoDownloadGetResponse(rsp)
}

// LoginLoginPostWithBodyWithResponse request with arbitrary body returning *LoginLoginPostResponse
func (c *ClientWithResponses) LoginLoginPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginLoginPostResponse, error) {
	rsp, err := c.LoginLoginPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginLoginPostResponse(rsp)
}

func (c *ClientWithResponses) LoginLoginPostWithFormdataBodyWithResponse(ctx context.Context, body LoginLoginPostFormdataRequestBody, reqEditors ...RequestEditorFn) (*LoginLoginPostResponse, error) {
	rsp, err := c.LoginLoginPostWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginLoginPostResponse(rsp)
}

// LoginCheckLoginCheckGetWithResponse request returning *LoginCheckLoginCheckGetResponse
func (c *ClientWithResponses) LoginCheckLoginCheckGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoginCheckLoginCheckGetResponse, error) {
	rsp, err := c.LoginCheckLoginCheckGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginCheckLoginCheckGetResponse(rsp)
}

// ReverseProxyProxyUrlPathGetWithResponse request returning *ReverseProxyProxyUrlPathGetResponse
func (c *ClientWithResponses) ReverseProxyProxyUrlPathGetWithResponse(ctx context.Context, urlPath string, reqEditors ...RequestEditorFn) (*ReverseProxyProxyUrlPathGetResponse, error) {
	rsp, err := c.ReverseProxyProxyUrlPathGet(ctx, urlPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReverseProxyProxyUrlPathGetResponse(rsp)
}

// ReverseProxyProxyUrlPathHeadWithResponse request returning *ReverseProxyProxyUrlPathHeadResponse
func (c *ClientWithResponses) ReverseProxyProxyUrlPathHeadWithResponse(ctx context.Context, urlPath string, reqEditors ...RequestEditorFn) (*ReverseProxyProxyUrlPathHeadResponse, error) {
	rsp, err := c.ReverseProxyProxyUrlPathHead(ctx, urlPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReverseProxyProxyUrlPathHeadResponse(rsp)
}

// GetQueueStatusQueueStatusGetWithResponse request returning *GetQueueStatusQueueStatusGetResponse
func (c *ClientWithResponses) GetQueueStatusQueueStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetQueueStatusQueueStatusGetResponse, error) {
	rsp, err := c.GetQueueStatusQueueStatusGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQueueStatusQueueStatusGetResponse(rsp)
}

// ResetIteratorResetPostWithBodyWithResponse request with arbitrary body returning *ResetIteratorResetPostResponse
func (c *ClientWithResponses) ResetIteratorResetPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetIteratorResetPostResponse, error) {
	rsp, err := c.ResetIteratorResetPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetIteratorResetPostResponse(rsp)
}

func (c *ClientWithResponses) ResetIteratorResetPostWithResponse(ctx context.Context, body ResetIteratorResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetIteratorResetPostResponse, error) {
	rsp, err := c.ResetIteratorResetPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetIteratorResetPostResponse(rsp)
}

// RobotsTxtRobotsTxtGetWithResponse request returning *RobotsTxtRobotsTxtGetResponse
func (c *ClientWithResponses) RobotsTxtRobotsTxtGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RobotsTxtRobotsTxtGetResponse, error) {
	rsp, err := c.RobotsTxtRobotsTxtGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRobotsTxtRobotsTxtGetResponse(rsp)
}

// PredictRunApiNamePostWithBodyWithResponse request with arbitrary body returning *PredictRunApiNamePostResponse
func (c *ClientWithResponses) PredictRunApiNamePostWithBodyWithResponse(ctx context.Context, apiName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PredictRunApiNamePostResponse, error) {
	rsp, err := c.PredictRunApiNamePostWithBody(ctx, apiName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePredictRunApiNamePostResponse(rsp)
}

func (c *ClientWithResponses) PredictRunApiNamePostWithResponse(ctx context.Context, apiName string, body PredictRunApiNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*PredictRunApiNamePostResponse, error) {
	rsp, err := c.PredictRunApiNamePost(ctx, apiName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePredictRunApiNamePostResponse(rsp)
}

// GetSingleCardSdExtraNetworksGetSingleCardGetWithResponse request returning *GetSingleCardSdExtraNetworksGetSingleCardGetResponse
func (c *ClientWithResponses) GetSingleCardSdExtraNetworksGetSingleCardGetWithResponse(ctx context.Context, params *GetSingleCardSdExtraNetworksGetSingleCardGetParams, reqEditors ...RequestEditorFn) (*GetSingleCardSdExtraNetworksGetSingleCardGetResponse, error) {
	rsp, err := c.GetSingleCardSdExtraNetworksGetSingleCardGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSingleCardSdExtraNetworksGetSingleCardGetResponse(rsp)
}

// GetMetadataSdExtraNetworksMetadataGetWithResponse request returning *GetMetadataSdExtraNetworksMetadataGetResponse
func (c *ClientWithResponses) GetMetadataSdExtraNetworksMetadataGetWithResponse(ctx context.Context, params *GetMetadataSdExtraNetworksMetadataGetParams, reqEditors ...RequestEditorFn) (*GetMetadataSdExtraNetworksMetadataGetResponse, error) {
	rsp, err := c.GetMetadataSdExtraNetworksMetadataGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetadataSdExtraNetworksMetadataGetResponse(rsp)
}

// FetchFileSdExtraNetworksThumbGetWithResponse request returning *FetchFileSdExtraNetworksThumbGetResponse
func (c *ClientWithResponses) FetchFileSdExtraNetworksThumbGetWithResponse(ctx context.Context, params *FetchFileSdExtraNetworksThumbGetParams, reqEditors ...RequestEditorFn) (*FetchFileSdExtraNetworksThumbGetResponse, error) {
	rsp, err := c.FetchFileSdExtraNetworksThumbGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchFileSdExtraNetworksThumbGetResponse(rsp)
}

// GetCmdFlagsSdapiV1CmdFlagsGetWithResponse request returning *GetCmdFlagsSdapiV1CmdFlagsGetResponse
func (c *ClientWithResponses) GetCmdFlagsSdapiV1CmdFlagsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCmdFlagsSdapiV1CmdFlagsGetResponse, error) {
	rsp, err := c.GetCmdFlagsSdapiV1CmdFlagsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCmdFlagsSdapiV1CmdFlagsGetResponse(rsp)
}

// CreateEmbeddingSdapiV1CreateEmbeddingPostWithBodyWithResponse request with arbitrary body returning *CreateEmbeddingSdapiV1CreateEmbeddingPostResponse
func (c *ClientWithResponses) CreateEmbeddingSdapiV1CreateEmbeddingPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEmbeddingSdapiV1CreateEmbeddingPostResponse, error) {
	rsp, err := c.CreateEmbeddingSdapiV1CreateEmbeddingPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEmbeddingSdapiV1CreateEmbeddingPostResponse(rsp)
}

func (c *ClientWithResponses) CreateEmbeddingSdapiV1CreateEmbeddingPostWithResponse(ctx context.Context, body CreateEmbeddingSdapiV1CreateEmbeddingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEmbeddingSdapiV1CreateEmbeddingPostResponse, error) {
	rsp, err := c.CreateEmbeddingSdapiV1CreateEmbeddingPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEmbeddingSdapiV1CreateEmbeddingPostResponse(rsp)
}

// CreateHypernetworkSdapiV1CreateHypernetworkPostWithBodyWithResponse request with arbitrary body returning *CreateHypernetworkSdapiV1CreateHypernetworkPostResponse
func (c *ClientWithResponses) CreateHypernetworkSdapiV1CreateHypernetworkPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHypernetworkSdapiV1CreateHypernetworkPostResponse, error) {
	rsp, err := c.CreateHypernetworkSdapiV1CreateHypernetworkPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHypernetworkSdapiV1CreateHypernetworkPostResponse(rsp)
}

func (c *ClientWithResponses) CreateHypernetworkSdapiV1CreateHypernetworkPostWithResponse(ctx context.Context, body CreateHypernetworkSdapiV1CreateHypernetworkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHypernetworkSdapiV1CreateHypernetworkPostResponse, error) {
	rsp, err := c.CreateHypernetworkSdapiV1CreateHypernetworkPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHypernetworkSdapiV1CreateHypernetworkPostResponse(rsp)
}

// GetEmbeddingsSdapiV1EmbeddingsGetWithResponse request returning *GetEmbeddingsSdapiV1EmbeddingsGetResponse
func (c *ClientWithResponses) GetEmbeddingsSdapiV1EmbeddingsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEmbeddingsSdapiV1EmbeddingsGetResponse, error) {
	rsp, err := c.GetEmbeddingsSdapiV1EmbeddingsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbeddingsSdapiV1EmbeddingsGetResponse(rsp)
}

// GetExtensionsListSdapiV1ExtensionsGetWithResponse request returning *GetExtensionsListSdapiV1ExtensionsGetResponse
func (c *ClientWithResponses) GetExtensionsListSdapiV1ExtensionsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExtensionsListSdapiV1ExtensionsGetResponse, error) {
	rsp, err := c.GetExtensionsListSdapiV1ExtensionsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExtensionsListSdapiV1ExtensionsGetResponse(rsp)
}

// ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithBodyWithResponse request with arbitrary body returning *ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse
func (c *ClientWithResponses) ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse, error) {
	rsp, err := c.ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse(rsp)
}

func (c *ClientWithResponses) ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithResponse(ctx context.Context, body ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse, error) {
	rsp, err := c.ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse(rsp)
}

// ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithBodyWithResponse request with arbitrary body returning *ExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse
func (c *ClientWithResponses) ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse, error) {
	rsp, err := c.ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse(rsp)
}

func (c *ClientWithResponses) ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithResponse(ctx context.Context, body ExtrasSingleImageApiSdapiV1ExtraSingleImagePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse, error) {
	rsp, err := c.ExtrasSingleImageApiSdapiV1ExtraSingleImagePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse(rsp)
}

// GetFaceRestorersSdapiV1FaceRestorersGetWithResponse request returning *GetFaceRestorersSdapiV1FaceRestorersGetResponse
func (c *ClientWithResponses) GetFaceRestorersSdapiV1FaceRestorersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFaceRestorersSdapiV1FaceRestorersGetResponse, error) {
	rsp, err := c.GetFaceRestorersSdapiV1FaceRestorersGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFaceRestorersSdapiV1FaceRestorersGetResponse(rsp)
}

// GetHypernetworksSdapiV1HypernetworksGetWithResponse request returning *GetHypernetworksSdapiV1HypernetworksGetResponse
func (c *ClientWithResponses) GetHypernetworksSdapiV1HypernetworksGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHypernetworksSdapiV1HypernetworksGetResponse, error) {
	rsp, err := c.GetHypernetworksSdapiV1HypernetworksGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHypernetworksSdapiV1HypernetworksGetResponse(rsp)
}

// Img2imgapiSdapiV1Img2imgPostWithBodyWithResponse request with arbitrary body returning *Img2imgapiSdapiV1Img2imgPostResponse
func (c *ClientWithResponses) Img2imgapiSdapiV1Img2imgPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Img2imgapiSdapiV1Img2imgPostResponse, error) {
	rsp, err := c.Img2imgapiSdapiV1Img2imgPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImg2imgapiSdapiV1Img2imgPostResponse(rsp)
}

func (c *ClientWithResponses) Img2imgapiSdapiV1Img2imgPostWithResponse(ctx context.Context, body Img2imgapiSdapiV1Img2imgPostJSONRequestBody, reqEditors ...RequestEditorFn) (*Img2imgapiSdapiV1Img2imgPostResponse, error) {
	rsp, err := c.Img2imgapiSdapiV1Img2imgPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImg2imgapiSdapiV1Img2imgPostResponse(rsp)
}

// InterrogateapiSdapiV1InterrogatePostWithBodyWithResponse request with arbitrary body returning *InterrogateapiSdapiV1InterrogatePostResponse
func (c *ClientWithResponses) InterrogateapiSdapiV1InterrogatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InterrogateapiSdapiV1InterrogatePostResponse, error) {
	rsp, err := c.InterrogateapiSdapiV1InterrogatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInterrogateapiSdapiV1InterrogatePostResponse(rsp)
}

func (c *ClientWithResponses) InterrogateapiSdapiV1InterrogatePostWithResponse(ctx context.Context, body InterrogateapiSdapiV1InterrogatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*InterrogateapiSdapiV1InterrogatePostResponse, error) {
	rsp, err := c.InterrogateapiSdapiV1InterrogatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInterrogateapiSdapiV1InterrogatePostResponse(rsp)
}

// InterruptapiSdapiV1InterruptPostWithResponse request returning *InterruptapiSdapiV1InterruptPostResponse
func (c *ClientWithResponses) InterruptapiSdapiV1InterruptPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InterruptapiSdapiV1InterruptPostResponse, error) {
	rsp, err := c.InterruptapiSdapiV1InterruptPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInterruptapiSdapiV1InterruptPostResponse(rsp)
}

// GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithResponse request returning *GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse
func (c *ClientWithResponses) GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse, error) {
	rsp, err := c.GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse(rsp)
}

// GetLorasSdapiV1LorasGetWithResponse request returning *GetLorasSdapiV1LorasGetResponse
func (c *ClientWithResponses) GetLorasSdapiV1LorasGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLorasSdapiV1LorasGetResponse, error) {
	rsp, err := c.GetLorasSdapiV1LorasGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLorasSdapiV1LorasGetResponse(rsp)
}

// GetMemorySdapiV1MemoryGetWithResponse request returning *GetMemorySdapiV1MemoryGetResponse
func (c *ClientWithResponses) GetMemorySdapiV1MemoryGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMemorySdapiV1MemoryGetResponse, error) {
	rsp, err := c.GetMemorySdapiV1MemoryGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemorySdapiV1MemoryGetResponse(rsp)
}

// GetConfigSdapiV1OptionsGetWithResponse request returning *GetConfigSdapiV1OptionsGetResponse
func (c *ClientWithResponses) GetConfigSdapiV1OptionsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigSdapiV1OptionsGetResponse, error) {
	rsp, err := c.GetConfigSdapiV1OptionsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigSdapiV1OptionsGetResponse(rsp)
}

// SetConfigSdapiV1OptionsPostWithBodyWithResponse request with arbitrary body returning *SetConfigSdapiV1OptionsPostResponse
func (c *ClientWithResponses) SetConfigSdapiV1OptionsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetConfigSdapiV1OptionsPostResponse, error) {
	rsp, err := c.SetConfigSdapiV1OptionsPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetConfigSdapiV1OptionsPostResponse(rsp)
}

func (c *ClientWithResponses) SetConfigSdapiV1OptionsPostWithResponse(ctx context.Context, body SetConfigSdapiV1OptionsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*SetConfigSdapiV1OptionsPostResponse, error) {
	rsp, err := c.SetConfigSdapiV1OptionsPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetConfigSdapiV1OptionsPostResponse(rsp)
}

// PnginfoapiSdapiV1PngInfoPostWithBodyWithResponse request with arbitrary body returning *PnginfoapiSdapiV1PngInfoPostResponse
func (c *ClientWithResponses) PnginfoapiSdapiV1PngInfoPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PnginfoapiSdapiV1PngInfoPostResponse, error) {
	rsp, err := c.PnginfoapiSdapiV1PngInfoPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePnginfoapiSdapiV1PngInfoPostResponse(rsp)
}

func (c *ClientWithResponses) PnginfoapiSdapiV1PngInfoPostWithResponse(ctx context.Context, body PnginfoapiSdapiV1PngInfoPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PnginfoapiSdapiV1PngInfoPostResponse, error) {
	rsp, err := c.PnginfoapiSdapiV1PngInfoPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePnginfoapiSdapiV1PngInfoPostResponse(rsp)
}

// ProgressapiSdapiV1ProgressGetWithResponse request returning *ProgressapiSdapiV1ProgressGetResponse
func (c *ClientWithResponses) ProgressapiSdapiV1ProgressGetWithResponse(ctx context.Context, params *ProgressapiSdapiV1ProgressGetParams, reqEditors ...RequestEditorFn) (*ProgressapiSdapiV1ProgressGetResponse, error) {
	rsp, err := c.ProgressapiSdapiV1ProgressGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProgressapiSdapiV1ProgressGetResponse(rsp)
}

// GetPromptStylesSdapiV1PromptStylesGetWithResponse request returning *GetPromptStylesSdapiV1PromptStylesGetResponse
func (c *ClientWithResponses) GetPromptStylesSdapiV1PromptStylesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPromptStylesSdapiV1PromptStylesGetResponse, error) {
	rsp, err := c.GetPromptStylesSdapiV1PromptStylesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromptStylesSdapiV1PromptStylesGetResponse(rsp)
}

// GetRealesrganModelsSdapiV1RealesrganModelsGetWithResponse request returning *GetRealesrganModelsSdapiV1RealesrganModelsGetResponse
func (c *ClientWithResponses) GetRealesrganModelsSdapiV1RealesrganModelsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRealesrganModelsSdapiV1RealesrganModelsGetResponse, error) {
	rsp, err := c.GetRealesrganModelsSdapiV1RealesrganModelsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealesrganModelsSdapiV1RealesrganModelsGetResponse(rsp)
}

// RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithResponse request returning *RefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse
func (c *ClientWithResponses) RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse, error) {
	rsp, err := c.RefreshCheckpointsSdapiV1RefreshCheckpointsPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse(rsp)
}

// RefreshLorasSdapiV1RefreshLorasPostWithResponse request returning *RefreshLorasSdapiV1RefreshLorasPostResponse
func (c *ClientWithResponses) RefreshLorasSdapiV1RefreshLorasPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshLorasSdapiV1RefreshLorasPostResponse, error) {
	rsp, err := c.RefreshLorasSdapiV1RefreshLorasPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshLorasSdapiV1RefreshLorasPostResponse(rsp)
}

// RefreshVaeSdapiV1RefreshVaePostWithResponse request returning *RefreshVaeSdapiV1RefreshVaePostResponse
func (c *ClientWithResponses) RefreshVaeSdapiV1RefreshVaePostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshVaeSdapiV1RefreshVaePostResponse, error) {
	rsp, err := c.RefreshVaeSdapiV1RefreshVaePost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshVaeSdapiV1RefreshVaePostResponse(rsp)
}

// ReloadapiSdapiV1ReloadCheckpointPostWithResponse request returning *ReloadapiSdapiV1ReloadCheckpointPostResponse
func (c *ClientWithResponses) ReloadapiSdapiV1ReloadCheckpointPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReloadapiSdapiV1ReloadCheckpointPostResponse, error) {
	rsp, err := c.ReloadapiSdapiV1ReloadCheckpointPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReloadapiSdapiV1ReloadCheckpointPostResponse(rsp)
}

// GetSamplersSdapiV1SamplersGetWithResponse request returning *GetSamplersSdapiV1SamplersGetResponse
func (c *ClientWithResponses) GetSamplersSdapiV1SamplersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSamplersSdapiV1SamplersGetResponse, error) {
	rsp, err := c.GetSamplersSdapiV1SamplersGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSamplersSdapiV1SamplersGetResponse(rsp)
}

// GetScriptInfoSdapiV1ScriptInfoGetWithResponse request returning *GetScriptInfoSdapiV1ScriptInfoGetResponse
func (c *ClientWithResponses) GetScriptInfoSdapiV1ScriptInfoGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetScriptInfoSdapiV1ScriptInfoGetResponse, error) {
	rsp, err := c.GetScriptInfoSdapiV1ScriptInfoGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScriptInfoSdapiV1ScriptInfoGetResponse(rsp)
}

// GetScriptsListSdapiV1ScriptsGetWithResponse request returning *GetScriptsListSdapiV1ScriptsGetResponse
func (c *ClientWithResponses) GetScriptsListSdapiV1ScriptsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetScriptsListSdapiV1ScriptsGetResponse, error) {
	rsp, err := c.GetScriptsListSdapiV1ScriptsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScriptsListSdapiV1ScriptsGetResponse(rsp)
}

// GetSdModelsSdapiV1SdModelsGetWithResponse request returning *GetSdModelsSdapiV1SdModelsGetResponse
func (c *ClientWithResponses) GetSdModelsSdapiV1SdModelsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSdModelsSdapiV1SdModelsGetResponse, error) {
	rsp, err := c.GetSdModelsSdapiV1SdModelsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSdModelsSdapiV1SdModelsGetResponse(rsp)
}

// GetSdVaesSdapiV1SdVaeGetWithResponse request returning *GetSdVaesSdapiV1SdVaeGetResponse
func (c *ClientWithResponses) GetSdVaesSdapiV1SdVaeGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSdVaesSdapiV1SdVaeGetResponse, error) {
	rsp, err := c.GetSdVaesSdapiV1SdVaeGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSdVaesSdapiV1SdVaeGetResponse(rsp)
}

// SkipSdapiV1SkipPostWithResponse request returning *SkipSdapiV1SkipPostResponse
func (c *ClientWithResponses) SkipSdapiV1SkipPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SkipSdapiV1SkipPostResponse, error) {
	rsp, err := c.SkipSdapiV1SkipPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSkipSdapiV1SkipPostResponse(rsp)
}

// TrainEmbeddingSdapiV1TrainEmbeddingPostWithBodyWithResponse request with arbitrary body returning *TrainEmbeddingSdapiV1TrainEmbeddingPostResponse
func (c *ClientWithResponses) TrainEmbeddingSdapiV1TrainEmbeddingPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainEmbeddingSdapiV1TrainEmbeddingPostResponse, error) {
	rsp, err := c.TrainEmbeddingSdapiV1TrainEmbeddingPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainEmbeddingSdapiV1TrainEmbeddingPostResponse(rsp)
}

func (c *ClientWithResponses) TrainEmbeddingSdapiV1TrainEmbeddingPostWithResponse(ctx context.Context, body TrainEmbeddingSdapiV1TrainEmbeddingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TrainEmbeddingSdapiV1TrainEmbeddingPostResponse, error) {
	rsp, err := c.TrainEmbeddingSdapiV1TrainEmbeddingPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainEmbeddingSdapiV1TrainEmbeddingPostResponse(rsp)
}

// TrainHypernetworkSdapiV1TrainHypernetworkPostWithBodyWithResponse request with arbitrary body returning *TrainHypernetworkSdapiV1TrainHypernetworkPostResponse
func (c *ClientWithResponses) TrainHypernetworkSdapiV1TrainHypernetworkPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainHypernetworkSdapiV1TrainHypernetworkPostResponse, error) {
	rsp, err := c.TrainHypernetworkSdapiV1TrainHypernetworkPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainHypernetworkSdapiV1TrainHypernetworkPostResponse(rsp)
}

func (c *ClientWithResponses) TrainHypernetworkSdapiV1TrainHypernetworkPostWithResponse(ctx context.Context, body TrainHypernetworkSdapiV1TrainHypernetworkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TrainHypernetworkSdapiV1TrainHypernetworkPostResponse, error) {
	rsp, err := c.TrainHypernetworkSdapiV1TrainHypernetworkPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainHypernetworkSdapiV1TrainHypernetworkPostResponse(rsp)
}

// Text2imgapiSdapiV1Txt2imgPostWithBodyWithResponse request with arbitrary body returning *Text2imgapiSdapiV1Txt2imgPostResponse
func (c *ClientWithResponses) Text2imgapiSdapiV1Txt2imgPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Text2imgapiSdapiV1Txt2imgPostResponse, error) {
	rsp, err := c.Text2imgapiSdapiV1Txt2imgPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseText2imgapiSdapiV1Txt2imgPostResponse(rsp)
}

func (c *ClientWithResponses) Text2imgapiSdapiV1Txt2imgPostWithResponse(ctx context.Context, body Text2imgapiSdapiV1Txt2imgPostJSONRequestBody, reqEditors ...RequestEditorFn) (*Text2imgapiSdapiV1Txt2imgPostResponse, error) {
	rsp, err := c.Text2imgapiSdapiV1Txt2imgPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseText2imgapiSdapiV1Txt2imgPostResponse(rsp)
}

// UnloadapiSdapiV1UnloadCheckpointPostWithResponse request returning *UnloadapiSdapiV1UnloadCheckpointPostResponse
func (c *ClientWithResponses) UnloadapiSdapiV1UnloadCheckpointPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UnloadapiSdapiV1UnloadCheckpointPostResponse, error) {
	rsp, err := c.UnloadapiSdapiV1UnloadCheckpointPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnloadapiSdapiV1UnloadCheckpointPostResponse(rsp)
}

// GetUpscalersSdapiV1UpscalersGetWithResponse request returning *GetUpscalersSdapiV1UpscalersGetResponse
func (c *ClientWithResponses) GetUpscalersSdapiV1UpscalersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpscalersSdapiV1UpscalersGetResponse, error) {
	rsp, err := c.GetUpscalersSdapiV1UpscalersGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpscalersSdapiV1UpscalersGetResponse(rsp)
}

// StartupEventsStartupEventsGetWithResponse request returning *StartupEventsStartupEventsGetResponse
func (c *ClientWithResponses) StartupEventsStartupEventsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StartupEventsStartupEventsGetResponse, error) {
	rsp, err := c.StartupEventsStartupEventsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartupEventsStartupEventsGetResponse(rsp)
}

// StaticResourceStaticPathGetWithResponse request returning *StaticResourceStaticPathGetResponse
func (c *ClientWithResponses) StaticResourceStaticPathGetWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*StaticResourceStaticPathGetResponse, error) {
	rsp, err := c.StaticResourceStaticPathGet(ctx, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStaticResourceStaticPathGetResponse(rsp)
}

// StreamStreamSessionHashRunComponentIdGetWithResponse request returning *StreamStreamSessionHashRunComponentIdGetResponse
func (c *ClientWithResponses) StreamStreamSessionHashRunComponentIdGetWithResponse(ctx context.Context, sessionHash string, run int, componentId int, reqEditors ...RequestEditorFn) (*StreamStreamSessionHashRunComponentIdGetResponse, error) {
	rsp, err := c.StreamStreamSessionHashRunComponentIdGet(ctx, sessionHash, run, componentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStreamStreamSessionHashRunComponentIdGetResponse(rsp)
}

// ThemeCssThemeCssGetWithResponse request returning *ThemeCssThemeCssGetResponse
func (c *ClientWithResponses) ThemeCssThemeCssGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ThemeCssThemeCssGetResponse, error) {
	rsp, err := c.ThemeCssThemeCssGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThemeCssThemeCssGetResponse(rsp)
}

// GetTokenTokenGetWithResponse request returning *GetTokenTokenGetResponse
func (c *ClientWithResponses) GetTokenTokenGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokenTokenGetResponse, error) {
	rsp, err := c.GetTokenTokenGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenTokenGetResponse(rsp)
}

// UploadFileUploadPostWithBodyWithResponse request with arbitrary body returning *UploadFileUploadPostResponse
func (c *ClientWithResponses) UploadFileUploadPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileUploadPostResponse, error) {
	rsp, err := c.UploadFileUploadPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadFileUploadPostResponse(rsp)
}

// GetCurrentUserUserGetWithResponse request returning *GetCurrentUserUserGetResponse
func (c *ClientWithResponses) GetCurrentUserUserGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserUserGetResponse, error) {
	rsp, err := c.GetCurrentUserUserGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentUserUserGetResponse(rsp)
}

// ParseMainGetResponse parses an HTTP response from a MainGetWithResponse call
func ParseMainGetResponse(rsp *http.Response) (*MainGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MainGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMainHeadResponse parses an HTTP response from a MainHeadWithResponse call
func ParseMainHeadResponse(rsp *http.Response) (*MainHeadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MainHeadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePredictApiApiNamePostResponse parses an HTTP response from a PredictApiApiNamePostWithResponse call
func ParsePredictApiApiNamePostResponse(rsp *http.Response) (*PredictApiApiNamePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PredictApiApiNamePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAppIdAppIdGetResponse parses an HTTP response from a AppIdAppIdGetWithResponse call
func ParseAppIdAppIdGetResponse(rsp *http.Response) (*AppIdAppIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppIdAppIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBuildResourceAssetsPathGetResponse parses an HTTP response from a BuildResourceAssetsPathGetWithResponse call
func ParseBuildResourceAssetsPathGetResponse(rsp *http.Response) (*BuildResourceAssetsPathGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildResourceAssetsPathGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetConfigConfigGetResponse parses an HTTP response from a GetConfigConfigGetWithResponse call
func ParseGetConfigConfigGetResponse(rsp *http.Response) (*GetConfigConfigGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigConfigGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFaviconFaviconIcoGetResponse parses an HTTP response from a FaviconFaviconIcoGetWithResponse call
func ParseFaviconFaviconIcoGetResponse(rsp *http.Response) (*FaviconFaviconIcoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FaviconFaviconIcoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFileDeprecatedFilePathGetResponse parses an HTTP response from a FileDeprecatedFilePathGetWithResponse call
func ParseFileDeprecatedFilePathGetResponse(rsp *http.Response) (*FileDeprecatedFilePathGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FileDeprecatedFilePathGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFileFilePathOrUrlGetResponse parses an HTTP response from a FileFilePathOrUrlGetWithResponse call
func ParseFileFilePathOrUrlGetResponse(rsp *http.Response) (*FileFilePathOrUrlGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FileFilePathOrUrlGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFileFilePathOrUrlHeadResponse parses an HTTP response from a FileFilePathOrUrlHeadWithResponse call
func ParseFileFilePathOrUrlHeadResponse(rsp *http.Response) (*FileFilePathOrUrlHeadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FileFilePathOrUrlHeadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseApiInfoInfoGetResponse parses an HTTP response from a ApiInfoInfoGetWithResponse call
func ParseApiInfoInfoGetResponse(rsp *http.Response) (*ApiInfoInfoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiInfoInfoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseLambdaInternalPingGetResponse parses an HTTP response from a LambdaInternalPingGetWithResponse call
func ParseLambdaInternalPingGetResponse(rsp *http.Response) (*LambdaInternalPingGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LambdaInternalPingGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLambdaInternalProfileStartupGetResponse parses an HTTP response from a LambdaInternalProfileStartupGetWithResponse call
func ParseLambdaInternalProfileStartupGetResponse(rsp *http.Response) (*LambdaInternalProfileStartupGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LambdaInternalProfileStartupGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProgressapiInternalProgressPostResponse parses an HTTP response from a ProgressapiInternalProgressPostWithResponse call
func ParseProgressapiInternalProgressPostResponse(rsp *http.Response) (*ProgressapiInternalProgressPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProgressapiInternalProgressPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModulesProgressProgressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseQuicksettingsHintInternalQuicksettingsHintGetResponse parses an HTTP response from a QuicksettingsHintInternalQuicksettingsHintGetWithResponse call
func ParseQuicksettingsHintInternalQuicksettingsHintGetResponse(rsp *http.Response) (*QuicksettingsHintInternalQuicksettingsHintGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuicksettingsHintInternalQuicksettingsHintGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []QuicksettingsHint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadSysinfoInternalSysinfoGetResponse parses an HTTP response from a DownloadSysinfoInternalSysinfoGetWithResponse call
func ParseDownloadSysinfoInternalSysinfoGetResponse(rsp *http.Response) (*DownloadSysinfoInternalSysinfoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadSysinfoInternalSysinfoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseLambdaInternalSysinfoDownloadGetResponse parses an HTTP response from a LambdaInternalSysinfoDownloadGetWithResponse call
func ParseLambdaInternalSysinfoDownloadGetResponse(rsp *http.Response) (*LambdaInternalSysinfoDownloadGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LambdaInternalSysinfoDownloadGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLoginLoginPostResponse parses an HTTP response from a LoginLoginPostWithResponse call
func ParseLoginLoginPostResponse(rsp *http.Response) (*LoginLoginPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginLoginPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseLoginCheckLoginCheckGetResponse parses an HTTP response from a LoginCheckLoginCheckGetWithResponse call
func ParseLoginCheckLoginCheckGetResponse(rsp *http.Response) (*LoginCheckLoginCheckGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginCheckLoginCheckGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReverseProxyProxyUrlPathGetResponse parses an HTTP response from a ReverseProxyProxyUrlPathGetWithResponse call
func ParseReverseProxyProxyUrlPathGetResponse(rsp *http.Response) (*ReverseProxyProxyUrlPathGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReverseProxyProxyUrlPathGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseReverseProxyProxyUrlPathHeadResponse parses an HTTP response from a ReverseProxyProxyUrlPathHeadWithResponse call
func ParseReverseProxyProxyUrlPathHeadResponse(rsp *http.Response) (*ReverseProxyProxyUrlPathHeadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReverseProxyProxyUrlPathHeadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetQueueStatusQueueStatusGetResponse parses an HTTP response from a GetQueueStatusQueueStatusGetWithResponse call
func ParseGetQueueStatusQueueStatusGetResponse(rsp *http.Response) (*GetQueueStatusQueueStatusGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQueueStatusQueueStatusGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Estimation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResetIteratorResetPostResponse parses an HTTP response from a ResetIteratorResetPostWithResponse call
func ParseResetIteratorResetPostResponse(rsp *http.Response) (*ResetIteratorResetPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetIteratorResetPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRobotsTxtRobotsTxtGetResponse parses an HTTP response from a RobotsTxtRobotsTxtGetWithResponse call
func ParseRobotsTxtRobotsTxtGetResponse(rsp *http.Response) (*RobotsTxtRobotsTxtGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RobotsTxtRobotsTxtGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePredictRunApiNamePostResponse parses an HTTP response from a PredictRunApiNamePostWithResponse call
func ParsePredictRunApiNamePostResponse(rsp *http.Response) (*PredictRunApiNamePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PredictRunApiNamePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSingleCardSdExtraNetworksGetSingleCardGetResponse parses an HTTP response from a GetSingleCardSdExtraNetworksGetSingleCardGetWithResponse call
func ParseGetSingleCardSdExtraNetworksGetSingleCardGetResponse(rsp *http.Response) (*GetSingleCardSdExtraNetworksGetSingleCardGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSingleCardSdExtraNetworksGetSingleCardGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetMetadataSdExtraNetworksMetadataGetResponse parses an HTTP response from a GetMetadataSdExtraNetworksMetadataGetWithResponse call
func ParseGetMetadataSdExtraNetworksMetadataGetResponse(rsp *http.Response) (*GetMetadataSdExtraNetworksMetadataGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetadataSdExtraNetworksMetadataGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFetchFileSdExtraNetworksThumbGetResponse parses an HTTP response from a FetchFileSdExtraNetworksThumbGetWithResponse call
func ParseFetchFileSdExtraNetworksThumbGetResponse(rsp *http.Response) (*FetchFileSdExtraNetworksThumbGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchFileSdExtraNetworksThumbGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCmdFlagsSdapiV1CmdFlagsGetResponse parses an HTTP response from a GetCmdFlagsSdapiV1CmdFlagsGetWithResponse call
func ParseGetCmdFlagsSdapiV1CmdFlagsGetResponse(rsp *http.Response) (*GetCmdFlagsSdapiV1CmdFlagsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCmdFlagsSdapiV1CmdFlagsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Flags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEmbeddingSdapiV1CreateEmbeddingPostResponse parses an HTTP response from a CreateEmbeddingSdapiV1CreateEmbeddingPostWithResponse call
func ParseCreateEmbeddingSdapiV1CreateEmbeddingPostResponse(rsp *http.Response) (*CreateEmbeddingSdapiV1CreateEmbeddingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEmbeddingSdapiV1CreateEmbeddingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateHypernetworkSdapiV1CreateHypernetworkPostResponse parses an HTTP response from a CreateHypernetworkSdapiV1CreateHypernetworkPostWithResponse call
func ParseCreateHypernetworkSdapiV1CreateHypernetworkPostResponse(rsp *http.Response) (*CreateHypernetworkSdapiV1CreateHypernetworkPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHypernetworkSdapiV1CreateHypernetworkPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetEmbeddingsSdapiV1EmbeddingsGetResponse parses an HTTP response from a GetEmbeddingsSdapiV1EmbeddingsGetWithResponse call
func ParseGetEmbeddingsSdapiV1EmbeddingsGetResponse(rsp *http.Response) (*GetEmbeddingsSdapiV1EmbeddingsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbeddingsSdapiV1EmbeddingsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmbeddingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExtensionsListSdapiV1ExtensionsGetResponse parses an HTTP response from a GetExtensionsListSdapiV1ExtensionsGetWithResponse call
func ParseGetExtensionsListSdapiV1ExtensionsGetResponse(rsp *http.Response) (*GetExtensionsListSdapiV1ExtensionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExtensionsListSdapiV1ExtensionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ExtensionItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse parses an HTTP response from a ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithResponse call
func ParseExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse(rsp *http.Response) (*ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExtrasBatchImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse parses an HTTP response from a ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithResponse call
func ParseExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse(rsp *http.Response) (*ExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtrasSingleImageApiSdapiV1ExtraSingleImagePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExtrasSingleImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetFaceRestorersSdapiV1FaceRestorersGetResponse parses an HTTP response from a GetFaceRestorersSdapiV1FaceRestorersGetWithResponse call
func ParseGetFaceRestorersSdapiV1FaceRestorersGetResponse(rsp *http.Response) (*GetFaceRestorersSdapiV1FaceRestorersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFaceRestorersSdapiV1FaceRestorersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FaceRestorerItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHypernetworksSdapiV1HypernetworksGetResponse parses an HTTP response from a GetHypernetworksSdapiV1HypernetworksGetWithResponse call
func ParseGetHypernetworksSdapiV1HypernetworksGetResponse(rsp *http.Response) (*GetHypernetworksSdapiV1HypernetworksGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHypernetworksSdapiV1HypernetworksGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HypernetworkItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImg2imgapiSdapiV1Img2imgPostResponse parses an HTTP response from a Img2imgapiSdapiV1Img2imgPostWithResponse call
func ParseImg2imgapiSdapiV1Img2imgPostResponse(rsp *http.Response) (*Img2imgapiSdapiV1Img2imgPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Img2imgapiSdapiV1Img2imgPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageToImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseInterrogateapiSdapiV1InterrogatePostResponse parses an HTTP response from a InterrogateapiSdapiV1InterrogatePostWithResponse call
func ParseInterrogateapiSdapiV1InterrogatePostResponse(rsp *http.Response) (*InterrogateapiSdapiV1InterrogatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InterrogateapiSdapiV1InterrogatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseInterruptapiSdapiV1InterruptPostResponse parses an HTTP response from a InterruptapiSdapiV1InterruptPostWithResponse call
func ParseInterruptapiSdapiV1InterruptPostResponse(rsp *http.Response) (*InterruptapiSdapiV1InterruptPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InterruptapiSdapiV1InterruptPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse parses an HTTP response from a GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithResponse call
func ParseGetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse(rsp *http.Response) (*GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LatentUpscalerModeItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLorasSdapiV1LorasGetResponse parses an HTTP response from a GetLorasSdapiV1LorasGetWithResponse call
func ParseGetLorasSdapiV1LorasGetResponse(rsp *http.Response) (*GetLorasSdapiV1LorasGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLorasSdapiV1LorasGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMemorySdapiV1MemoryGetResponse parses an HTTP response from a GetMemorySdapiV1MemoryGetWithResponse call
func ParseGetMemorySdapiV1MemoryGetResponse(rsp *http.Response) (*GetMemorySdapiV1MemoryGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemorySdapiV1MemoryGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigSdapiV1OptionsGetResponse parses an HTTP response from a GetConfigSdapiV1OptionsGetWithResponse call
func ParseGetConfigSdapiV1OptionsGetResponse(rsp *http.Response) (*GetConfigSdapiV1OptionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigSdapiV1OptionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Options
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetConfigSdapiV1OptionsPostResponse parses an HTTP response from a SetConfigSdapiV1OptionsPostWithResponse call
func ParseSetConfigSdapiV1OptionsPostResponse(rsp *http.Response) (*SetConfigSdapiV1OptionsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetConfigSdapiV1OptionsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePnginfoapiSdapiV1PngInfoPostResponse parses an HTTP response from a PnginfoapiSdapiV1PngInfoPostWithResponse call
func ParsePnginfoapiSdapiV1PngInfoPostResponse(rsp *http.Response) (*PnginfoapiSdapiV1PngInfoPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PnginfoapiSdapiV1PngInfoPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PNGInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseProgressapiSdapiV1ProgressGetResponse parses an HTTP response from a ProgressapiSdapiV1ProgressGetWithResponse call
func ParseProgressapiSdapiV1ProgressGetResponse(rsp *http.Response) (*ProgressapiSdapiV1ProgressGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProgressapiSdapiV1ProgressGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModulesApiModelsProgressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPromptStylesSdapiV1PromptStylesGetResponse parses an HTTP response from a GetPromptStylesSdapiV1PromptStylesGetWithResponse call
func ParseGetPromptStylesSdapiV1PromptStylesGetResponse(rsp *http.Response) (*GetPromptStylesSdapiV1PromptStylesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPromptStylesSdapiV1PromptStylesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PromptStyleItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRealesrganModelsSdapiV1RealesrganModelsGetResponse parses an HTTP response from a GetRealesrganModelsSdapiV1RealesrganModelsGetWithResponse call
func ParseGetRealesrganModelsSdapiV1RealesrganModelsGetResponse(rsp *http.Response) (*GetRealesrganModelsSdapiV1RealesrganModelsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealesrganModelsSdapiV1RealesrganModelsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RealesrganItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse parses an HTTP response from a RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithResponse call
func ParseRefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse(rsp *http.Response) (*RefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshCheckpointsSdapiV1RefreshCheckpointsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRefreshLorasSdapiV1RefreshLorasPostResponse parses an HTTP response from a RefreshLorasSdapiV1RefreshLorasPostWithResponse call
func ParseRefreshLorasSdapiV1RefreshLorasPostResponse(rsp *http.Response) (*RefreshLorasSdapiV1RefreshLorasPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshLorasSdapiV1RefreshLorasPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRefreshVaeSdapiV1RefreshVaePostResponse parses an HTTP response from a RefreshVaeSdapiV1RefreshVaePostWithResponse call
func ParseRefreshVaeSdapiV1RefreshVaePostResponse(rsp *http.Response) (*RefreshVaeSdapiV1RefreshVaePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshVaeSdapiV1RefreshVaePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReloadapiSdapiV1ReloadCheckpointPostResponse parses an HTTP response from a ReloadapiSdapiV1ReloadCheckpointPostWithResponse call
func ParseReloadapiSdapiV1ReloadCheckpointPostResponse(rsp *http.Response) (*ReloadapiSdapiV1ReloadCheckpointPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReloadapiSdapiV1ReloadCheckpointPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSamplersSdapiV1SamplersGetResponse parses an HTTP response from a GetSamplersSdapiV1SamplersGetWithResponse call
func ParseGetSamplersSdapiV1SamplersGetResponse(rsp *http.Response) (*GetSamplersSdapiV1SamplersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSamplersSdapiV1SamplersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SamplerItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetScriptInfoSdapiV1ScriptInfoGetResponse parses an HTTP response from a GetScriptInfoSdapiV1ScriptInfoGetWithResponse call
func ParseGetScriptInfoSdapiV1ScriptInfoGetResponse(rsp *http.Response) (*GetScriptInfoSdapiV1ScriptInfoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScriptInfoSdapiV1ScriptInfoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ScriptInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetScriptsListSdapiV1ScriptsGetResponse parses an HTTP response from a GetScriptsListSdapiV1ScriptsGetWithResponse call
func ParseGetScriptsListSdapiV1ScriptsGetResponse(rsp *http.Response) (*GetScriptsListSdapiV1ScriptsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScriptsListSdapiV1ScriptsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScriptsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSdModelsSdapiV1SdModelsGetResponse parses an HTTP response from a GetSdModelsSdapiV1SdModelsGetWithResponse call
func ParseGetSdModelsSdapiV1SdModelsGetResponse(rsp *http.Response) (*GetSdModelsSdapiV1SdModelsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSdModelsSdapiV1SdModelsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SDModelItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSdVaesSdapiV1SdVaeGetResponse parses an HTTP response from a GetSdVaesSdapiV1SdVaeGetWithResponse call
func ParseGetSdVaesSdapiV1SdVaeGetResponse(rsp *http.Response) (*GetSdVaesSdapiV1SdVaeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSdVaesSdapiV1SdVaeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SDVaeItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSkipSdapiV1SkipPostResponse parses an HTTP response from a SkipSdapiV1SkipPostWithResponse call
func ParseSkipSdapiV1SkipPostResponse(rsp *http.Response) (*SkipSdapiV1SkipPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SkipSdapiV1SkipPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainEmbeddingSdapiV1TrainEmbeddingPostResponse parses an HTTP response from a TrainEmbeddingSdapiV1TrainEmbeddingPostWithResponse call
func ParseTrainEmbeddingSdapiV1TrainEmbeddingPostResponse(rsp *http.Response) (*TrainEmbeddingSdapiV1TrainEmbeddingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TrainEmbeddingSdapiV1TrainEmbeddingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTrainHypernetworkSdapiV1TrainHypernetworkPostResponse parses an HTTP response from a TrainHypernetworkSdapiV1TrainHypernetworkPostWithResponse call
func ParseTrainHypernetworkSdapiV1TrainHypernetworkPostResponse(rsp *http.Response) (*TrainHypernetworkSdapiV1TrainHypernetworkPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TrainHypernetworkSdapiV1TrainHypernetworkPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseText2imgapiSdapiV1Txt2imgPostResponse parses an HTTP response from a Text2imgapiSdapiV1Txt2imgPostWithResponse call
func ParseText2imgapiSdapiV1Txt2imgPostResponse(rsp *http.Response) (*Text2imgapiSdapiV1Txt2imgPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Text2imgapiSdapiV1Txt2imgPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TextToImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUnloadapiSdapiV1UnloadCheckpointPostResponse parses an HTTP response from a UnloadapiSdapiV1UnloadCheckpointPostWithResponse call
func ParseUnloadapiSdapiV1UnloadCheckpointPostResponse(rsp *http.Response) (*UnloadapiSdapiV1UnloadCheckpointPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnloadapiSdapiV1UnloadCheckpointPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUpscalersSdapiV1UpscalersGetResponse parses an HTTP response from a GetUpscalersSdapiV1UpscalersGetWithResponse call
func ParseGetUpscalersSdapiV1UpscalersGetResponse(rsp *http.Response) (*GetUpscalersSdapiV1UpscalersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpscalersSdapiV1UpscalersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UpscalerItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartupEventsStartupEventsGetResponse parses an HTTP response from a StartupEventsStartupEventsGetWithResponse call
func ParseStartupEventsStartupEventsGetResponse(rsp *http.Response) (*StartupEventsStartupEventsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartupEventsStartupEventsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStaticResourceStaticPathGetResponse parses an HTTP response from a StaticResourceStaticPathGetWithResponse call
func ParseStaticResourceStaticPathGetResponse(rsp *http.Response) (*StaticResourceStaticPathGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StaticResourceStaticPathGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseStreamStreamSessionHashRunComponentIdGetResponse parses an HTTP response from a StreamStreamSessionHashRunComponentIdGetWithResponse call
func ParseStreamStreamSessionHashRunComponentIdGetResponse(rsp *http.Response) (*StreamStreamSessionHashRunComponentIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StreamStreamSessionHashRunComponentIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseThemeCssThemeCssGetResponse parses an HTTP response from a ThemeCssThemeCssGetWithResponse call
func ParseThemeCssThemeCssGetResponse(rsp *http.Response) (*ThemeCssThemeCssGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThemeCssThemeCssGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTokenTokenGetResponse parses an HTTP response from a GetTokenTokenGetWithResponse call
func ParseGetTokenTokenGetResponse(rsp *http.Response) (*GetTokenTokenGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenTokenGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadFileUploadPostResponse parses an HTTP response from a UploadFileUploadPostWithResponse call
func ParseUploadFileUploadPostResponse(rsp *http.Response) (*UploadFileUploadPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadFileUploadPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCurrentUserUserGetResponse parses an HTTP response from a GetCurrentUserUserGetWithResponse call
func ParseGetCurrentUserUserGetResponse(rsp *http.Response) (*GetCurrentUserUserGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentUserUserGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}